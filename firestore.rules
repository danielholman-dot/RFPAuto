/**
 * @fileoverview Firestore Security Rules for the MARCUS Automation Suite.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model combined with
 * resource-based authorization achieved through data denormalization.
 * Users with specific roles (e.g., project creator, administrator)
 * gain elevated privileges.  Access to project-related data is governed
 * by a denormalized 'members' map (not explicitly implemented in the schema,
 * but assumed for subcollections) that determines user roles within a project.
 *
 * Data Structure:
 * - /projects/{projectId}: Stores project details.
 * - /projects/{projectId}/technicalDocuments/{technicalDocumentId}: Stores technical documents for a project.
 * - /projects/{projectId}/eoiEmails/{eoiEmailId}: Stores Expression of Interest emails for a project.
 * - /projects/{projectId}/rfpEmails/{rfpEmailId}: Stores RFP invitation emails for a project.
 * - /rfps/{rfpId}: Stores Requests for Proposals.
 * - /proposals/{proposalId}: Stores proposals submitted by contractors.
 * - /scorecards/{scorecardId}: Stores scorecards for evaluating proposals.
 * - /projects/{projectId}/awardRecommendations/{awardRecommendationId}: Stores award recommendations for projects.
 * - /projects/{projectId}/feedback/{feedbackId}: Stores feedback for projects.
 * - /metroCodes/{metroCodeId}: Stores metro codes.
 * - /contractors/{contractorId}: Stores contractor information.
 * - /roles_admin/{userId}: Indicates a user with admin privileges.
 * - /roles_project_creator/{userId}: Indicates a user who can create projects.
 *
 * Key Security Decisions:
 * - Users can only create projects if they have the 'project_creator' role.
 * - Access to project subcollections (technicalDocuments, eoiEmails, rfpEmails, awardRecommendations, feedback)
 *   is based on a denormalized 'members' map within the project (not explicitly defined, so rules will be permissive).
 * - Listing of most collections is restricted for security.
 *
 * Denormalization for Authorization:
 * The rules rely on the assumed denormalization of a 'members' map from the parent
 * /projects/{projectId} document into its subcollections (e.g., /projects/{projectId}/eoiEmails/{eoiEmailId}).
 * This map (if implemented in the data) would contain user IDs and their roles within the project,
 * enabling efficient access control without costly `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @principle Authentication is required for most operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's ID matches the given userId.
     * @principle Enforces user-specific data access.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if a document exists and the user is the owner.
     * @principle Ensures a document exists before allowing updates or deletes.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     */
    function isExistingOwner() {
        return isSignedIn() && resource.data.ownerId == request.auth.uid;
    }
    
    /**
     * @description Checks if the user has the 'project_creator' role.
     * @principle Limits project creation to authorized users.
     */
    function hasProjectCreatorRole() {
        return exists(/databases/$(database)/documents/roles_project_creator/$(request.auth.uid));
    }

    /**
     * @description Checks if the user has the 'admin' role.
     * @principle Limits admin operations to authorized users.
     */
     function hasAdminRole() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for the /projects/{projectId} collection.
     * @path /projects/{projectId}
     * @allow (create) User with 'project_creator' role creates a new project.
     * @deny (create) User without 'project_creator' role attempts to create a project.
     * @allow (get) Any signed-in user can read a project.
     * @deny (list) No one can list projects.
     * @principle Requires 'project_creator' role for creation. Allows public read access for signed in users.
     */
    match /projects/{projectId} {
        allow create: if isSignedIn() && hasProjectCreatorRole();
        allow get: if isSignedIn();
        allow list: if false;
        allow update: if isSignedIn() && isExistingOwner();
        allow delete: if isSignedIn() && hasAdminRole(); // Or add owner delete if appropriate
    }

    /**
     * @description Rules for the /projects/{projectId}/technicalDocuments/{technicalDocumentId} collection.
     * @path /projects/{projectId}/technicalDocuments/{technicalDocumentId}
     * @allow (create) Any signed-in user can create a technical document.
     * @deny (list) No one can list technical documents.
     * @principle Allows any signed-in user to create, but restricts listing.
     */
    match /projects/{projectId}/technicalDocuments/{technicalDocumentId} {
        allow create: if isSignedIn();
        allow get: if isSignedIn();
        allow list: if false;
        allow update: if isSignedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
        allow delete: if isSignedIn() && hasAdminRole(); // Or add owner delete if appropriate
    }

    /**
     * @description Rules for the /projects/{projectId}/eoiEmails/{eoiEmailId} collection.
     * @path /projects/{projectId}/eoiEmails/{eoiEmailId}
     * @allow (create) Any signed-in user can create an EOI email.
     * @deny (list) No one can list EOI emails.
     * @principle Allows any signed-in user to create, but restricts listing.
     */
    match /projects/{projectId}/eoiEmails/{eoiEmailId} {
        allow create: if isSignedIn();
        allow get: if isSignedIn();
        allow list: if false;
        allow update: if isSignedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
        allow delete: if isSignedIn() && hasAdminRole(); // Or add owner delete if appropriate
    }

    /**
     * @description Rules for the /projects/{projectId}/rfpEmails/{rfpEmailId} collection.
     * @path /projects/{projectId}/rfpEmails/{rfpEmailId}
     * @allow (create) Any signed-in user can create an RFP email.
     * @deny (list) No one can list RFP emails.
     * @principle Allows any signed-in user to create, but restricts listing.
     */
    match /projects/{projectId}/rfpEmails/{rfpEmailId} {
        allow create: if isSignedIn();
        allow get: if isSignedIn();
        allow list: if false;
        allow update: if isSignedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
        allow delete: if isSignedIn() && hasAdminRole(); // Or add owner delete if appropriate
    }

    /**
     * @description Rules for the /rfps/{rfpId} collection.
     * @path /rfps/{rfpId}
     * @allow (create) Any signed-in user can create an RFP.
     * @deny (list) No one can list RFPs.
     * @principle Allows any signed-in user to create, but restricts listing.
     */
    match /rfps/{rfpId} {
        allow create: if isSignedIn();
        allow get: if isSignedIn();
        allow list: if false;
        allow update: if isSignedIn() && isExistingOwner();
        allow delete: if isSignedIn() && hasAdminRole(); // Or add owner delete if appropriate
    }

    /**
     * @description Rules for the /proposals/{proposalId} collection.
     * @path /proposals/{proposalId}
     * @allow (create) Any signed-in user can create a proposal.
     * @deny (list) No one can list proposals.
     * @principle Allows any signed-in user to create, but restricts listing.
     */
    match /proposals/{proposalId} {
        allow create: if isSignedIn();
        allow get: if isSignedIn();
        allow list: if false;
        allow update: if isSignedIn() && isExistingOwner();
        allow delete: if isSignedIn() && hasAdminRole(); // Or add owner delete if appropriate
    }

    /**
     * @description Rules for the /scorecards/{scorecardId} collection.
     * @path /scorecards/{scorecardId}
     * @allow (create) Any signed-in user can create a scorecard.
     * @deny (list) No one can list scorecards.
     * @principle Allows any signed-in user to create, but restricts listing.
     */
    match /scorecards/{scorecardId} {
        allow create: if isSignedIn();
        allow get: if isSignedIn();
        allow list: if false;
        allow update: if isSignedIn() && isExistingOwner();
        allow delete: if isSignedIn() && hasAdminRole(); // Or add owner delete if appropriate
    }

    /**
     * @description Rules for the /projects/{projectId}/awardRecommendations/{awardRecommendationId} collection.
     * @path /projects/{projectId}/awardRecommendations/{awardRecommendationId}
     * @allow (create) Any signed-in user can create an award recommendation.
     * @deny (list) No one can list award recommendations.
     * @principle Allows any signed-in user to create, but restricts listing.
     */
    match /projects/{projectId}/awardRecommendations/{awardRecommendationId} {
        allow create: if isSignedIn();
        allow get: if isSignedIn();
        allow list: if false;
        allow update: if isSignedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
        allow delete: if isSignedIn() && hasAdminRole(); // Or add owner delete if appropriate
    }

    /**
     * @description Rules for the /projects/{projectId}/feedback/{feedbackId} collection.
     * @path /projects/{projectId}/feedback/{feedbackId}
     * @allow (create) Any signed-in user can create feedback.
     * @deny (list) No one can list feedback.
     * @principle Allows any signed-in user to create, but restricts listing.
     */
    match /projects/{projectId}/feedback/{feedbackId} {
        allow create: if isSignedIn();
        allow get: if isSignedIn();
        allow list: if false;
        allow update: if isSignedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
        allow delete: if isSignedIn() && hasAdminRole(); // Or add owner delete if appropriate
    }

    /**
     * @description Rules for the /metroCodes/{metroCodeId} collection.
     * @path /metroCodes/{metroCodeId}
     * @allow (get, list) Public read access for all users.
     * @deny (create, update, delete) No write access.
     * @principle Public read-only collection.
     */
    match /metroCodes/{metroCodeId} {
        allow read: if true;
        allow write: if false;
    }

    /**
     * @description Rules for the /contractors/{contractorId} collection.
     * @path /contractors/{contractorId}
     * @allow (get, list) Public read access for all users.
     * @deny (create, update, delete) No write access.
     * @principle Public read-only collection.
     */
    match /contractors/{contractorId} {
        allow read: if true;
        allow write: if false;
    }

     /**
      * @description Rules for the /roles_admin/{userId} collection.
      * @path /roles_admin/{userId}
      * @allow (get) Any signed-in user can check for the admin role.
      * @allow (create) Only an admin can grant admin roles.
      * @deny (list) No one can list the admin roles.
      * @principle Restricts role management to existing admins.
      */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow create: if hasAdminRole();
      allow update: if false;
      allow delete: if false;
      allow list: if false;
    }

    /**
     * @description Rules for the /roles_project_creator/{userId} collection.
     * @path /roles_project_creator/{userId}
     * @allow (get) Any signed-in user can check for the project creator role.
     * @allow (create) Only an admin can grant project creator roles.
     * @deny (list) No one can list the project creator roles.
     * @principle Restricts role management to existing admins.
     */
    match /roles_project_creator/{userId} {
      allow get: if isSignedIn();
      allow create: if hasAdminRole();
      allow update: if false;
      allow delete: if false;
      allow list: if false;
    }
  }
}