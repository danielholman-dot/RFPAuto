rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines the isSignedIn helper function.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines the isOwner helper function.
     * @param {string} userId - The user ID to check against the request's authentication UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Helper function to check if the authenticated user is an invited contractor for a given project.
     * @param {array} invitedContractorIds - The array of invited contractor IDs on the project.
     */
    function isInvitedContractor(invitedContractorIds) {
        return isSignedIn() && invitedContractorIds.hasAny([request.auth.uid]);
    }

    /**
     * @description Helper function to determine if the user is the existing owner of a document.
     * @param {string} userId - The user ID of the document's owner.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /rfps/{rfpId} collection (Projects).
     * @path /rfps/{rfpId}
     * @allow (get, list): Any user can read project details.
     * @allow (create): Only an authenticated user can create a project, and they must be in the invitedContractorIds list. The id field of the new project should match its document ID.
     * @allow (update, delete): Only an invited contractor can update or delete a project.
     * @deny (create): An unauthenticated user cannot create a project.
     * @deny (update, delete): A user who is not in the invitedContractorIds list cannot update or delete a project.
     * @principle Allows public read access to project details while restricting write access to invited contractors.
     */
    match /rfps/{rfpId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource.data.invitedContractorIds.hasAny([request.auth.uid]);
    }

    /**
     * @description Rules for the /rfps/{rfpId}/proposals/{proposalId} subcollection (Proposals).
     * @path /rfps/{rfpId}/proposals/{proposalId}
     * @allow (get, list): Only the contractor who created the proposal can read it.
     * @allow (create): Only an authenticated contractor can create a proposal, and their contractorId must match the request.auth.uid and the projectId must match the rfpId.
     * @allow (update, delete): Only the contractor who created the proposal can update or delete it.
     * @deny (create): An unauthenticated user cannot create a proposal.
     * @deny (update, delete): A user who is not the owner cannot update or delete a proposal.
     * @principle Enforces strict ownership for proposals, where only the creating contractor can access or modify them.
     */
    match /rfps/{rfpId}/proposals/{proposalId} {
      allow get, list: if isSignedIn() && resource.data.contractorId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.contractorId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.contractorId == request.auth.uid;
    }

        /**
     * @description Rules for the /RFP_Weighting_evaluation/{rfpId} collection (EvaluationChecklist).
     * @path /RFP_Weighting_evaluation/{rfpId}
     * @allow (get, list): Only the authenticated user who created the weighting can read it.
     * @allow (create): Only an authenticated user can create a weighting, and the id field should match the document ID.
     * @allow (update, delete): Only the user who created the weighting can update or delete it.
     * @deny (create): An unauthenticated user cannot create a weighting.
     * @deny (update, delete): A user who is not the owner cannot update or delete a weighting.
     * @principle Enforces strict ownership for evaluation checklists, where only the creating user can access or modify them.
     */
    match /RFP_Weighting_evaluation/{rfpId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Rules for the /contractors/{contractorId} collection (Contractors).
     * @path /contractors/{contractorId}
     * @allow (get, list): Any user can read contractor profiles.
     * @deny (create, update, delete): No user can create, update, or delete contractor profiles.
     * @principle Allows public read access to contractor profiles while preventing any modifications.
     */
    match /contractors/{contractorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /metro_codes/{metroCodeId} collection (Metro Codes).
     * @path /metro_codes/{metroCodeId}
     * @allow (get, list): Any user can read metro code information.
     * @deny (create, update, delete): No user can create, update, or delete metro code information.
     * @principle Allows public read access to metro code information while preventing any modifications.
     */
    match /metro_codes/{metroCodeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /users/{userId} collection (Users).
     * @path /users/{userId}
     * @allow (get): Only the user themselves can read their profile.
     * @allow (create): Only an authenticated user can create their profile, and the id field must match their auth.uid.
     * @allow (update, delete): Only the user themselves can update or delete their profile.
     * @deny (list): User listing is not allowed.
     * @principle Enforces strict ownership for user profiles, ensuring that only the user can access or modify their own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isOwner(userId);
      allow list: if false;
    }
  }
}