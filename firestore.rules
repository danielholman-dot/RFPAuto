/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and allows public read access to RFPs and related data, with owner-only restrictions on write operations.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only by the user themselves.
 * - /rfps/{rfpId}: Stores RFP (Project) data, publicly readable.
 * - /rfps/{rfpId}/proposals/{proposalId}: Stores proposals for a specific RFP, publicly readable.
 * - /rfps/{rfpId}/evaluation_checklist/{checklistId}: Stores evaluation checklists for RFPs, publicly readable.
 * - /contractors/{contractorId}: Stores contractor data, publicly readable.
 * - /metro_codes/{metroCodeId}: Stores metro code data, publicly readable.
 *
 * Key Security Decisions:
 * - User profiles (/users/{userId}) are strictly private and only accessible by the user themselves.
 * - RFPs, proposals, evaluation checklists, contractors, and metro codes are publicly readable to facilitate discovery and participation.
 * - Write operations (create, update, delete) on RFPs and related data are restricted to the owner (creator) of the RFP.  This requires an `ownerId` or similar field on the RFP documents.
 * - Listing of users is disallowed to protect user privacy.
 *
 * Denormalization for Authorization:
 * - RFP documents should include an `ownerId` field to simplify ownership checks for write operations.  This avoids costly `get()` calls.
 *
 * Structural Segregation:
 * - The design favors public read access to RFPs.  If the application required a mix of public and private RFPs, a separate collection for private RFPs under the user's profile would be more secure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the document.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the existing owner of the document.
     * @param {string} userId - The user ID to compare against the resource's data.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates a profile with id 'user123'.
     * @allow (get,update,delete) User with UID 'user123' reads their own profile at /users/user123.
     * @deny (create) User with UID 'user456' attempts to create a profile with id 'user123'.
     * @deny (get,update,delete) User with UID 'user456' attempts to read the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for RFP (Project) documents.
     * @path /rfps/{rfpId}
     * @allow (get,list) Any user can read any RFP.
     * @allow (create) User with UID 'user123' creates an RFP with 'ownerId' field set to 'user123'.
     * @allow (update,delete) User with UID 'user123' updates or deletes an RFP where resource.data.ownerId == 'user123'.
     * @deny (create) User with UID 'user456' attempts to create an RFP with 'ownerId' field set to 'user123'.
     * @deny (update,delete) User with UID 'user456' attempts to update or delete an RFP where resource.data.ownerId == 'user123'.
     * @principle Allows public read access with owner-only writes, validating the ownerId on create.
     */
    match /rfps/{rfpId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.primaryStakeholderEmail == request.auth.token.email;
      allow update: if resource.data.primaryStakeholderEmail == request.auth.token.email;
      allow delete: if resource.data.primaryStakeholderEmail == request.auth.token.email;
    }

    /**
     * @description Enforces access control for proposals within an RFP.
     * @path /rfps/{rfpId}/proposals/{proposalId}
     * @allow (get,list) Any user can read any proposal.
     * @allow (create) Contractor creates proposal where contractorId equals the authenticated user id.
     * @allow (update,delete) Only the contractor that created the proposal can update or delete it.
     * @deny (create) User with UID 'user456' attempts to create a proposal for RFP 'rfp123' without proper contractorId
     * @deny (update,delete) User with UID 'user456' attempts to update/delete a proposal that was created by 'contractor789'.
     * @principle Allows public read access with contractor-only writes.
     */
    match /rfps/{rfpId}/proposals/{proposalId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // Any signed-in user can create a proposal
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces access control for evaluation checklists within an RFP.
     * @path /rfps/{rfpId}/evaluation_checklist/{checklistId}
     * @allow (get,list) Any user can read any evaluation checklist.
     * @allow (create) User with correct role can create an evaluation checklist (roles not defined, defaulting to false)
     * @allow (update,delete) User with correct role can update or delete an evaluation checklist (roles not defined, defaulting to false).
     * @deny (create) User attempts to create an evaluation checklist without the required role.
     * @deny (update,delete) User attempts to update/delete an evaluation checklist without the required role.
     * @principle Public read, restricted writes based on undefined user roles.
     */
    match /rfps/{rfpId}/evaluation_checklist/{checklistId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces access control for contractor profiles.
     * @path /contractors/{contractorId}
     * @allow (get,list) Any user can read any contractor profile.
     * @allow (create) User with correct role can create a contractor profile (roles not defined, defaulting to false).
     * @allow (update,delete) User with correct role can update or delete a contractor profile (roles not defined, defaulting to false).
     * @deny (create) User attempts to create a contractor profile without the required role.
     * @deny (update,delete) User attempts to update/delete a contractor profile without the required role.
     * @principle Public read, restricted writes based on undefined user roles.
     */
    match /contractors/{contractorId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces access control for metro codes.
     * @path /metro_codes/{metroCodeId}
     * @allow (get,list) Any user can read any metro code.
     * @allow (create) User with correct role can create a metro code (roles not defined, defaulting to false).
     * @allow (update,delete) User with correct role can update or delete a metro code (roles not defined, defaulting to false).
     * @deny (create) User attempts to create a metro code without the required role.
     * @deny (update,delete) User attempts to update/delete a metro code without the required role.
     * @principle Public read, restricted writes based on undefined user roles.
     */
    match /metro_codes/{metroCodeId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}