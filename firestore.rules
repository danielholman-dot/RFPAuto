/**
 * @fileOverview Firestore Security Rules for RFP Management Application
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user documents and allows public read access to the `rfps`, `contractors`, and `metro_codes` collections, but only allows owners to create, update and delete those documents. Proposals are secured such that only authenticated users can manage them.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /rfps/{rfpId}: Stores project data, publicly readable, but owner-modifiable.
 * - /rfps/{rfpId}/proposals/{proposalId}: Stores proposals for a given project.
 * - /contractors/{contractorId}: Stores contractor data, publicly readable, but owner-modifiable.
 * - /metro_codes/{metroCodeId}: Stores metro code data, publicly readable, but owner-modifiable.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - RFP, Contractor, and Metro Code data are publicly readable to facilitate discovery.
 * - Missing ownership field for RFP, Contractor and MetroCode entities requires owner-only writes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID of the document's owner.
     * @return {boolean} True if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - An authenticated user can create their own user document if the userId matches their auth UID.
     * @allow (get, update, delete) - An authenticated user can only access/modify their own user document.
     * @deny (create) - An unauthenticated user cannot create a user document.
     * @deny (get, update, delete) - An authenticated user cannot access/modify another user's document.
     * @principle Enforces document ownership for all operations on user documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Disallow listing of all users

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /rfps/{rfpId} collection.
     * @path /rfps/{rfpId}
     * @allow (get, list) - Any user can read (get, list) RFPs.
     * @allow (create, update, delete) - Only the owner (creator) can modify RFPs.
     * @deny (create) - An unauthenticated user cannot create an RFP.
     * @deny (update, delete) - A non-owner user cannot modify an existing RFP.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /rfps/{rfpId} {
      allow get, list: if true;
      // CRITICAL: Cannot implement owner-only writes. The 'Project' entity is missing an 'ownerId' or 'authorId' field.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /rfps/{rfpId}/proposals/{proposalId} subcollection.
     * @path /rfps/{rfpId}/proposals/{proposalId}
     * @allow (create) - Any authenticated user can create a proposal.
     * @allow (get, list, update, delete) - Only the authenticated user can manage their proposals.
     * @deny (create, update, delete) - An unauthenticated user cannot create or modify proposals.
     */
    match /rfps/{rfpId}/proposals/{proposalId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /contractors/{contractorId} collection.
     * @path /contractors/{contractorId}
     * @allow (get, list) - Any user can read (get, list) contractors.
     * @allow (create, update, delete) - Only the owner (creator) can modify contractors.
     * @deny (create) - An unauthenticated user cannot create a contractor.
     * @deny (update, delete) - A non-owner user cannot modify an existing contractor.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /contractors/{contractorId} {
      allow get, list: if true;
          // CRITICAL: Cannot implement owner-only writes. The 'Contractor' entity is missing an 'ownerId' or 'authorId' field.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /metro_codes/{metroCodeId} collection.
     * @path /metro_codes/{metroCodeId}
     * @allow (get, list) - Any user can read (get, list) metro codes.
     * @allow (create, update, delete) - Only the owner (creator) can modify metro codes.
     * @deny (create) - An unauthenticated user cannot create a metro code.
     * @deny (update, delete) - A non-owner user cannot modify an existing metro code.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /metro_codes/{metroCodeId} {
      allow get, list: if true;
      // CRITICAL: Cannot implement owner-only writes. The 'MetroCode' entity is missing an 'ownerId' or 'authorId' field.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}