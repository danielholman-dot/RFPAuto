/**
 * @file Overview
 * This ruleset enforces a shared access model for RFPs and their associated proposals,
 * and public read access to contractors and metro codes.
 *
 * Data Structure:
 * - /rfps/{rfpId}: RFP documents, representing projects.
 * - /rfps/{rfpId}/proposals/{proposalId}: Proposal documents submitted for a specific RFP.
 * - /contractors/{contractorId}: Contractor documents.
 * - /metro_codes/{metroCodeId}: Metro code documents.
 *
 * Key Security Decisions:
 * - RFPs and Proposals are secured via shared access. The `invitedContractorIds` field on an RFP determines which contractors can access the RFP and submit proposals.
 * - Contractors and Metro Codes are publicly readable.
 * - All write operations are secured, preventing unauthorized data modification.
 *
 * Denormalization for Authorization:
 * - RFP documents have an `invitedContractorIds` field, which is used to determine which contractors can read the RFP and submit proposals.
 *
 * Structural Segregation:
 * - There is no need for structural segregation in this data model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows invited contractors to read an RFP (Project) and submit proposals,
     *              and allows the same contractors to list proposals under an RFP.
     * @path /rfps/{rfpId}
     * @allow get, list: if data.invitedContractorIds.hasAny([request.auth.uid]);
     * @allow create: if request.resource.data.invitedContractorIds.hasAny([request.auth.uid]);
     * @allow update: if data.invitedContractorIds.hasAny([request.auth.uid]) && resource != null;
     * @allow delete: if false;
     * @deny get: if false;
     * @principle Enforces shared access based on the `invitedContractorIds` field.
     */
    match /rfps/{rfpId} {
      function isInvitedContractor(invitedContractorIds) {
        return isSignedIn() && invitedContractorIds.hasAny([request.auth.uid]);
      }

      allow get, list: if isInvitedContractor(resource.data.invitedContractorIds);
      allow create: if false; // Creating an RFP should be done through backend to set the project data correctly
      allow update: if isInvitedContractor(resource.data.invitedContractorIds) && resource != null;
      allow delete: if false;

      /**
       * @description Allows invited contractors to create and manage proposals for an RFP.
       * @path /rfps/{rfpId}/proposals/{proposalId}
       * @allow create: if isInvitedContractor(get(/databases/$(database)/documents/rfps/$(rfpId)).data.invitedContractorIds);
       * @allow get, list: if isInvitedContractor(get(/databases/$(database)/documents/rfps/$(rfpId)).data.invitedContractorIds);
       * @allow update: if isExistingInvitedContractor(get(/databases/$(database)/documents/rfps/$(rfpId)).data.invitedContractorIds);
       * @allow delete: if isExistingInvitedContractor(get(/databases/$(database)/documents/rfps/$(rfpId)).data.invitedContractorIds);
       * @deny create: if false;
       * @deny get: if false;
       * @principle Enforces shared access based on the `invitedContractorIds` field on the parent RFP.
       */
      match /proposals/{proposalId} {
        function isExistingInvitedContractor(invitedContractorIds) {
          return isSignedIn()
              && resource != null
              && invitedContractorIds.hasAny([request.auth.uid]);
        }

        allow create: if isSignedIn() && get(/databases/$(database)/documents/rfps/$(rfpId)).data.invitedContractorIds.hasAny([request.auth.uid]) && request.resource.data.contractorId == request.auth.uid;
        allow get, list: if isSignedIn() && get(/databases/$(database)/documents/rfps/$(rfpId)).data.invitedContractorIds.hasAny([request.auth.uid]);
        allow update: if isExistingInvitedContractor(get(/databases/$(database)/documents/rfps/$(rfpId)).data.invitedContractorIds) && request.resource.data.contractorId == resource.data.contractorId;
        allow delete: if isExistingInvitedContractor(get(/databases/$(database)/documents/rfps/$(rfpId)).data.invitedContractorIds);
      }
    }

    /**
     * @description Allows anyone to read contractor information, but restricts write access.
     * @path /contractors/{contractorId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false && resource != null;
     * @allow delete: if false && resource != null;
     * @deny get: if false;
     * @principle Allows public read access to contractor data.
     */
    match /contractors/{contractorId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false && resource != null;
      allow delete: if false && resource != null;
    }

    /**
     * @description Allows anyone to read metro code information, but restricts write access.
     * @path /metro_codes/{metroCodeId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false && resource != null;
     * @allow delete: if false && resource != null;
     * @deny get: if false;
     * @principle Allows public read access to metro code data.
     */
    match /metro_codes/{metroCodeId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false && resource != null;
      allow delete: if false && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}