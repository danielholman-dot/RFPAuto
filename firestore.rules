/**
 * @fileoverview Firestore Security Rules for the RFP application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for RFPs, Proposals, and Feedback, ensuring that only authenticated users can create, read, update, or delete resources they own. Public read access is granted for Contractors and Metro Codes.
 *
 * Data Structure:
 * - /users/{userId}: User profile data (not explicitly defined in the input).
 * - /users/{userId}/rfps/{rfpId}: RFPs created by a specific user.
 * - /users/{userId}/rfps/{rfpId}/proposals/{proposalId}: Proposals submitted for a specific RFP.
 * - /users/{userId}/rfps/{rfpId}/feedback/{feedbackId}: Feedback for a specific RFP.
 * - /contractors/{contractorId}: Contractor profiles.
 * - /metro_codes/{metroCodeId}: Metro codes and descriptions.
 *
 * Key Security Decisions:
 * - RFPs, Proposals, and Feedback are strictly owned by the user identified in the path.
 * - Contractors and Metro Codes are publicly readable.
 * - User listing is disabled for privacy.
 * - Write access to Contractors is restricted (implementation TBD).
 * - Default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 * The path-based ownership model inherently denormalizes the user ID onto all child documents, simplifying authorization checks.
 *
 * Structural Segregation:
 * Private user data (RFPs, Proposals, Feedback) is segregated under the /users/{userId} path, while public data (Contractors, Metro Codes) resides in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated (user is signed in).
     * @path N/A (helper function)
     * @allow N/A (helper function)
     * @deny N/A (helper function)
     * @principle Authentication is required for most operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @path N/A (helper function)
     * @allow N/A (helper function)
     * @deny N/A (helper function)
     * @principle Enforces user ownership.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user owns the existing document.
     * @path N/A (helper function)
     * @allow N/A (helper function)
     * @deny N/A (helper function)
     * @principle Verifies document existence and ownership for updates/deletes.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' can create their own profile document.
     * @deny (create) User 'user_xyz' cannot create a profile document for 'user_abc'.
     * @principle Enforces user-ownership and self-creation.
     */
    match /users/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for RFPs created by a specific user.
     * @path /users/{userId}/rfps/{rfpId}
     * @allow (create) User 'user_abc' can create an RFP under their user ID.
     * @deny (create) User 'user_xyz' cannot create an RFP under 'user_abc's ID.
     * @principle Enforces user-ownership for RFP creation and management.
     */
    match /users/{userId}/rfps/{rfpId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for proposals submitted for a specific RFP.
     * @path /users/{userId}/rfps/{rfpId}/proposals/{proposalId}
     * @allow (create) User 'user_abc' can create a proposal if they own the parent RFP.
     * @deny (create) User 'user_xyz' cannot create a proposal under an RFP they don't own.
     * @principle Enforces user-ownership for proposal management under a specific RFP.
     */
    match /users/{userId}/rfps/{rfpId}/proposals/{proposalId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for feedback submitted for a specific RFP.
     * @path /users/{userId}/rfps/{rfpId}/feedback/{feedbackId}
     * @allow (create) User 'user_abc' can create feedback if they own the parent RFP.
     * @deny (create) User 'user_xyz' cannot create feedback under an RFP they don't own.
     * @principle Enforces user-ownership for feedback management under a specific RFP.
     */
    match /users/{userId}/rfps/{rfpId}/feedback/{feedbackId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for contractor profiles. Publicly readable, but write access is restricted.
     * @path /contractors/{contractorId}
     * @allow (get) Any user can read contractor profiles.
     * @deny (create) No one can create contractor profiles without proper authorization.
     * @principle Provides public read access to contractor data; restricts write access.
     */
    match /contractors/{contractorId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation once implemented.
    }

    /**
     * @description Rules for metro codes and their descriptions. Publicly readable.
     * @path /metro_codes/{metroCodeId}
     * @allow (get) Any user can read metro code data.
     * @deny (create) No one can create metro code profiles without proper authorization.
     * @principle Provides public read access to metro code data.
     */
    match /metro_codes/{metroCodeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation once implemented.
    }
  }
}