/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access to projects and related data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the user themselves.
 * - /rfps/{rfpId}: Stores project data. Public read access is allowed.
 * - /rfps/{rfpId}/proposals/{proposalId}: Stores proposals for a project. Public read access is allowed.
 * - /contractors/{contractorId}: Stores contractor data. Public read access is allowed.
 * - /metro_codes/{metroCodeId}: Stores metro code data. Public read access is allowed.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user document.
 * - Listing of users is disallowed for privacy.
 * - Public read access is granted to projects, contractors, and metro codes to facilitate discovery.
 * - Write operations for projects, contractors, and metro codes are currently disabled but include TODOs.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}
     * @allow (create) User with ID matching auth UID can create their profile.
     * @allow (get, update, delete) User with ID matching auth UID can read, update, and delete their profile.
     * @deny Any other user cannot access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to RFP (Project) documents.
     * @path /rfps/{rfpId}
     * @allow (get, list) Any user can read/list RFPs.
     * @deny (create, update, delete) Only the owner of an RFP can modify it.
     * @principle Public read access with owner-only writes.
     */
    match /rfps/{rfpId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Proposal documents within an RFP.
     * @path /rfps/{rfpId}/proposals/{proposalId}
     * @allow (get, list) Any user can read/list Proposals within an RFP.
     * @deny (create, update, delete) Only the owner of a Proposal can modify it.
     * @principle Public read access with owner-only writes.
     */
    match /rfps/{rfpId}/proposals/{proposalId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Contractor documents.
     * @path /contractors/{contractorId}
     * @allow (get, list) Any user can read/list Contractors.
     * @deny (create, update, delete) Only an authorized user can modify a Contractor.
     * @principle Public read access with restricted writes.
     */
    match /contractors/{contractorId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation if needed.
    }

    /**
     * @description Controls access to MetroCode documents.
     * @path /metro_codes/{metroCodeId}
     * @allow (get, list) Any user can read/list MetroCodes.
     * @deny (create, update, delete) Only an authorized user can modify a MetroCode.
     * @principle Public read access with restricted writes.
     */
    match /metro_codes/{metroCodeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation if needed.
    }
  }
}