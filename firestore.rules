/**
 * @fileOverview Firestore Security Rules for RFP Management Application
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure-by-default approach, focusing on preventing unauthorized data access and manipulation.
 * It leverages the Firebase Authentication context (`request.auth`) to control access based on user identity.
 * Data validation is intentionally relaxed to facilitate rapid prototyping.
 *
 * Data Structure:
 * - /rfps/{rfpId}: Represents projects (RFPs).
 * - /rfps/{rfpId}/proposals/{proposalId}: Represents proposals submitted for a specific project.
 * - /contractors/{contractorId}: Represents contractor profiles.
 * - /metro_codes/{metroCodeId}: Represents metro code information.
 *
 * Key Security Decisions:
 * - RFP and Contractor collections are publicly readable to allow easy data discovery. Write access is restricted.
 * - Proposals are secured to only allow listing by authenticated users.
 * - Data validation is minimal, focusing on authorization-critical fields rather than comprehensive schema enforcement.
 *
 * Denormalization for Authorization:
 *  N/A - Currently not used, but should be considered if more complex roles or relationships are introduced.
 * Structural Segregation:
 *  N/A - No explicit segregation is used for public/private data in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for the /rfps collection (Projects).
     * @path /rfps/{rfpId}
     * @allow get, list: Any user can read project data.
     * @allow create: Only authenticated users can create projects. Requires validation of the creatorId.
     * @allow update, delete: Only the project creator can modify or delete projects.
     * @principle Public read, owner-only writes, with creator ID validation.
     */
    match /rfps/{rfpId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /rfps/{rfpId}/proposals subcollection.
     * @path /rfps/{rfpId}/proposals/{proposalId}
     * @allow get: Any authenticated user can get a proposal.
     * @allow list: Any authenticated user can list proposals.
     * @allow create: Only authenticated users can create proposals.
     * @allow update, delete: No one can update or delete proposals.
     * @principle Authenticated users can manage proposals.
     */
    match /rfps/{rfpId}/proposals/{proposalId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Rules for the /contractors collection.
     * @path /contractors/{contractorId}
     * @allow get, list: Any user can read contractor data.
     * @allow create: Only authenticated users can create contractors. Requires validation of the creatorId.
     * @allow update, delete: Only the contractor creator can modify or delete contractors.
     * @principle Public read, owner-only writes, with creator ID validation.
     */
    match /contractors/{contractorId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /metro_codes collection.
     * @path /metro_codes/{metroCodeId}
     * @allow get, list: Any user can read metro code data.
     * @allow create: Only authenticated users can create metro codes. Requires validation of the creatorId.
     * @allow update, delete: Only the metro code creator can modify or delete metro codes.
     * @principle Public read, owner-only writes, with creator ID validation.
     */
    match /metro_codes/{metroCodeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}