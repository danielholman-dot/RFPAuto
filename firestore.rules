/**
 * @fileOverview Firestore Security Rules for RFP Automation Platform
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and RFP projects.
 * Contractors and Metro Codes are publicly readable.
 * Proposals are accessible only to the contractors who created them and the project owner.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, writable only by the authenticated user.
 * - /rfps/{rfpId}: RFP projects, accessible to the owner and invited contractors.
 * - /rfps/{rfpId}/proposals/{proposalId}: Proposals for RFPs, accessible to the contractor who created it and project owner.
 * - /contractors/{contractorId}: Contractor profiles, publicly readable.
 * - /metro_codes/{metroCodeId}: Metro codes, publicly readable.
 * - /RFP_Weighting_evaluation/{rfpId}: Evaluation checklist configuration, accessible to the owner
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Contractors and metro codes are publicly readable to facilitate application functionality.
 * - Role-based access control is not implemented in this version.
 *
 * Denormalization for Authorization:
 * - RFP documents do not denormalize the invitedContractorIds, meaning the rule for proposals cannot efficiently check the invitation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     * @deny (create) User with ID 'user123' attempts to create profile for 'user456'.
     * @allow (get) User with ID 'user123' retrieves their profile.
     * @deny (get) User with ID 'user123' attempts to retrieve profile for 'user456'.
     * @allow (update) User with ID 'user123' updates their profile.
     * @deny (update) User with ID 'user123' attempts to update profile for 'user456'.
     * @allow (delete) User with ID 'user123' deletes their profile.
     * @deny (delete) User with ID 'user123' attempts to delete profile for 'user456'.
     * @principle Enforces document ownership for writes; owner-only access to user data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to RFP projects.
     * @path /rfps/{rfpId}
     * @allow (create) User with ID 'user123' creates a new RFP project.
     * @deny (create) User with ID 'user123' attempts to create an RFP project with mismatched ownerId.
     * @allow (get) Anyone can read RFP projects.
     * @allow (list) Anyone can list RFP projects.
     * @allow (update) User with ID 'user123' updates their RFP project.
     * @deny (update) User with ID 'user123' attempts to update someone else's RFP project.
     * @allow (delete) User with ID 'user123' deletes their RFP project.
     * @deny (delete) User with ID 'user123' attempts to delete someone else's RFP project.
     * @principle Public read access with owner-only writes.
     */
    match /rfps/{rfpId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secure access to proposals for RFPs.
     * @path /rfps/{rfpId}/proposals/{proposalId}
     * @allow (create) Contractor with ID 'contractor123' creates a proposal for RFP 'rfp456'.
     * @deny (create) User with ID 'user123' attempts to create a proposal without being a contractor.
     * @allow (get) Contractor with ID 'contractor123' retrieves their proposal for RFP 'rfp456'.
     * @deny (get) User with ID 'user123' attempts to retrieve proposal they don't own.
     * @allow (list) Contractor with ID 'contractor123' lists their proposals for RFP 'rfp456'.
     * @deny (list) User with ID 'user123' attempts to list proposals they don't own.
     * @allow (update) Contractor with ID 'contractor123' updates their proposal for RFP 'rfp456'.
     * @deny (update) User with ID 'user123' attempts to update proposal they don't own.
     * @allow (delete) Contractor with ID 'contractor123' deletes their proposal for RFP 'rfp456'.
     * @deny (delete) User with ID 'user123' attempts to delete proposal they don't own.
     * @principle Owner-only access to proposals, with owner being the submitting contractor.
     */
    match /rfps/{rfpId}/proposals/{proposalId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secure access to evaluation checklist configurations.
     * @path /RFP_Weighting_evaluation/{rfpId}
     * @allow (create) User with ID 'user123' creates a checklist for RFP 'rfp456'.
     * @deny (create) User with ID 'user123' attempts to create a checklist for RFP 'rfp789' without ownership.
     * @allow (get) User with ID 'user123' retrieves the checklist for RFP 'rfp456'.
     * @deny (get) User with ID 'user123' attempts to retrieve checklist for RFP 'rfp789' without ownership.
     * @allow (list) Only the owner can list checklists.
     * @deny (list) User with ID 'user123' attempts to list checklists without ownership.
     * @allow (update) User with ID 'user123' updates the checklist for RFP 'rfp456'.
     * @deny (update) User with ID 'user123' attempts to update checklist for RFP 'rfp789' without ownership.
     * @allow (delete) User with ID 'user123' deletes the checklist for RFP 'rfp456'.
     * @deny (delete) User with ID 'user123' attempts to delete checklist for RFP 'rfp789' without ownership.
     * @principle Owner-only access to evaluation checklists.
     */
    match /RFP_Weighting_evaluation/{rfpId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Public read access to contractor profiles.
     * @path /contractors/{contractorId}
     * @allow (get) Anyone can read contractor profiles.
     * @allow (list) Anyone can list contractor profiles.
     * @deny (create) No one can create contractor profiles via the client.
     * @deny (update) No one can update contractor profiles via the client.
     * @deny (delete) No one can delete contractor profiles via the client.
     * @principle Public read, no client writes allowed.
     */
    match /contractors/{contractorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Public read access to metro codes.
     * @path /metro_codes/{metroCodeId}
     * @allow (get) Anyone can read metro codes.
     * @allow (list) Anyone can list metro codes.
     * @deny (create) No one can create metro codes via the client.
     * @deny (update) No one can update metro codes via the client.
     * @deny (delete) No one can delete metro codes via the client.
     * @principle Public read, no client writes allowed.
     */
    match /metro_codes/{metroCodeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}