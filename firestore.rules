/**
 * @fileoverview Firestore Security Rules for the MARCUS Automation Suite.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model.  Access to projects and related
 * subcollections is governed by roles defined at the project level. Public read access is
 * granted to contractors, metro codes, and technical documents.
 *
 * Data Structure:
 * - /projects/{projectId}: Top-level collection for projects.
 * - /projects/{projectId}/emails_eoi/{eoiEmailId}: Subcollection for EOI emails.
 * - /projects/{projectId}/emails_rfp/{rfpEmailId}: Subcollection for RFP emails.
 * - /projects/{projectId}/proposals/{proposalId}: Subcollection for proposals.
 * - /projects/{projectId}/award_recommendations/{awardRecommendationId}: Subcollection for award recommendations.
 * - /projects/{projectId}/feedback/{feedbackId}: Subcollection for feedback.
 * - /contractors/{contractorId}: Top-level collection for contractors.
 * - /metro_codes/{metroCodeId}: Top-level collection for metro codes.
 * - /technical_documents/{technicalDocumentId}: Top-level collection for technical documents.
 *
 * Key Security Decisions:
 * - All top-level collections are readable by anyone, including unauthenticated users.
 * - Write access to projects and all subcollections is denied (TODO: should be updated to role-based access).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the authenticated user is the owner of a document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if the authenticated user is the owner of an existing document.
    function isExistingOwner(userId) {
      return (isOwner(userId) && resource != null);
    }

    /**
     * @description Controls access to project documents.
     * @path /projects/{projectId}
     * @allow (get, list): Any user can read project data.
     * @allow (create, update, delete): No one can modify or delete projects. (TODO: should be updated to role-based access)
     * @deny (create, update, delete): Always deny these operations.
     * @principle No writes are allowed on the project collection. (TODO: should be updated to role-based access)
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to EOI email documents within a project.
     * @path /projects/{projectId}/emails_eoi/{eoiEmailId}
     * @allow (get, list): Any user can read EOI email data.
     * @allow (create, update, delete): No one can modify or delete EOI emails. (TODO: should be updated to role-based access)
     * @deny (create, update, delete): Always deny these operations.
     * @principle No writes are allowed on the EOI email subcollection. (TODO: should be updated to role-based access)
     */
    match /projects/{projectId}/emails_eoi/{eoiEmailId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to RFP email documents within a project.
     * @path /projects/{projectId}/emails_rfp/{rfpEmailId}
     * @allow (get, list): Any user can read RFP email data.
     * @allow (create, update, delete): No one can modify or delete RFP emails. (TODO: should be updated to role-based access)
     * @deny (create, update, delete): Always deny these operations.
     * @principle No writes are allowed on the RFP email subcollection. (TODO: should be updated to role-based access)
     */
    match /projects/{projectId}/emails_rfp/{rfpEmailId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to proposal documents within a project.
     * @path /projects/{projectId}/proposals/{proposalId}
     * @allow (get, list): Any user can read proposal data.
     * @allow (create, update, delete): No one can modify or delete proposals. (TODO: should be updated to role-based access)
     * @deny (create, update, delete): Always deny these operations.
     * @principle No writes are allowed on the proposal subcollection. (TODO: should be updated to role-based access)
     */
    match /projects/{projectId}/proposals/{proposalId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to award recommendation documents within a project.
     * @path /projects/{projectId}/award_recommendations/{awardRecommendationId}
     * @allow (get, list): Any user can read award recommendation data.
     * @allow (create, update, delete): No one can modify or delete award recommendations. (TODO: should be updated to role-based access)
     * @deny (create, update, delete): Always deny these operations.
     * @principle No writes are allowed on the award recommendation subcollection. (TODO: should be updated to role-based access)
     */
    match /projects/{projectId}/award_recommendations/{awardRecommendationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to feedback documents within a project.
     * @path /projects/{projectId}/feedback/{feedbackId}
     * @allow (get, list): Any user can read feedback data.
     * @allow (create, update, delete): No one can modify or delete feedback. (TODO: should be updated to role-based access)
     * @deny (create, update, delete): Always deny these operations.
     * @principle No writes are allowed on the feedback subcollection. (TODO: should be updated to role-based access)
     */
    match /projects/{projectId}/feedback/{feedbackId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to contractor documents.
     * @path /contractors/{contractorId}
     * @allow (get, list): Any user can read contractor data.
     * @allow (create, update, delete): No one can modify or delete contractors. (TODO: should be updated to role-based access)
     * @deny (create, update, delete): Always deny these operations.
     * @principle No writes are allowed on the contractor collection. (TODO: should be updated to role-based access)
     */
    match /contractors/{contractorId} {
      allow get, list: if true;
       allow create: if false;
            allow update: if false;
                 allow delete: if false;
    }

    /**
     * @description Controls access to metro code documents.
     * @path /metro_codes/{metroCodeId}
     * @allow (get, list): Any user can read metro code data.
     * @allow (create, update, delete): No one can modify or delete metro codes. (TODO: should be updated to role-based access)
     * @deny (create, update, delete): Always deny these operations.
     * @principle No writes are allowed on the metro code collection. (TODO: should be updated to role-based access)
     */
    match /metro_codes/{metroCodeId} {
      allow get, list: if true;
       allow create: if false;
            allow update: if false;
                 allow delete: if false;
    }

    /**
     * @description Controls access to technical document documents.
     * @path /technical_documents/{technicalDocumentId}
     * @allow (get, list): Any user can read technical document data.
     * @allow (create, update, delete): No one can modify or delete technical documents. (TODO: should be updated to role-based access)
     * @deny (create, update, delete): Always deny these operations.
     * @principle No writes are allowed on the technical document collection. (TODO: should be updated to role-based access)
     */
    match /technical_documents/{technicalDocumentId} {
      allow get, list: if true;
       allow create: if false;
            allow update: if false;
                 allow delete: if false;
    }
  }
}