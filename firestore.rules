/**
 * @fileOverview Firestore Security Rules for the RFP application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and access controls.
 * It allows for public read access to some collections but restricts writes to authorized users.
 *
 * Data Structure:
 * - /rfps/{rfpId}: Stores project data.
 * - /rfps/{rfpId}/proposals/{proposalId}: Stores proposals associated with a specific RFP.
 * - /contractors/{contractorId}: Stores contractor data.
 * - /metro_codes/{metroCodeId}: Stores metro code data.
 *
 * Key Security Decisions:
 * - RFP (Project) Collection: Public read, owner-only writes based on `invitedContractorIds`
 * - Proposals Subcollection: Owner-only access for listing proposals under an RFP.
 * - Contractor Collection: Public read, no writes allowed via security rules.
 * - MetroCode Collection: Public read, no writes allowed via security rules.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 * - The `rfps` collection uses the `invitedContractorIds` field to control proposal submissions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to RFPs (Projects), but restricts write access to authorized contractors.
     * @path /rfps/{rfpId}
     * @allow (get, list): Any user can read RFP data.
     * @allow (create): Only invited contractors can create.
     * @deny (update, delete): Only the invited contractors can update or delete.
     * @principle Allows public read access, restricts write access to authorized contractors using the `invitedContractorIds` field.
     */
    match /rfps/{rfpId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.invitedContractorIds;
      allow update: if isSignedIn() && request.auth.uid in resource.data.invitedContractorIds;
      allow delete: if false;
    }

    /**
     * @description Restricts access to listing proposals under a specific RFP to invited contractors only.
     * @path /rfps/{rfpId}/proposals/{proposalId}
     * @allow (get): Any user can read a specific proposal if they know the ID.
     * @allow (list): Only authorized contractors can list proposals for an RFP.
     * @allow (create): Only invited contractors can create proposals.
     * @deny (update, delete): No updates or deletes are allowed via security rules.
     * @principle Enforces owner-only access to the proposals subcollection.
     */
    match /rfps/{rfpId}/proposals/{proposalId} {
      allow get: if true;
      allow list: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/rfps/$(rfpId)).data.invitedContractorIds;
      allow create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/rfps/$(rfpId)).data.invitedContractorIds;
      allow update, delete: if false;
    }

    /**
     * @description Allows public read access to Contractors, but prevents any writes.
     * @path /contractors/{contractorId}
     * @allow (get, list): Any user can read contractor data.
     * @deny (create, update, delete): No writes are allowed.
     * @principle Provides public read access to contractor data, but protects against unauthorized modifications.
     */
    match /contractors/{contractorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to MetroCodes, but prevents any writes.
     * @path /metro_codes/{metroCodeId}
     * @allow (get, list): Any user can read metro code data.
     * @deny (create, update, delete): No writes are allowed.
     * @principle Provides public read access to metro code data, but protects against unauthorized modifications.
     */
    match /metro_codes/{metroCodeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}