/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based security model with ownership checks for user-specific data.
 *
 * Data Structure:
 * - /rfps/{rfpId}: Publicly readable projects.
 * - /rfps/{rfpId}/proposals/{proposalId}: Proposals related to a project, accessible to authorized users.
 * - /contractors/{contractorId}: Publicly readable contractor profiles.
 * - /metro_codes/{metroCodeId}: Publicly readable metro codes.
 * - /users/{userId}: User profiles, accessible only to the user themselves.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - RFP data and Contractor data is publicly readable but only updatable by an admin
 * - Listing of users is disallowed.
 *
 * Denormalization for Authorization:
 * - RFP documents require an 'ownerId' or 'authorId' field to control write access. Currently, the schema doesn't have this, so it needs to be added.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to all RFPs (Projects) and restricts write access to the owner.
     * @path /rfps/{rfpId}
     * @allow get, list: if true;
     * @allow create: if request.auth.uid != null; // Assuming any authenticated user can create. Adjust as needed.
     * @allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny create: if false;
     * @principle Public read, owner-only writes (once ownership is implemented).
     */
    match /rfps/{rfpId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // Allowing any authenticated user to create. Adjust as needed.
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows access to proposals for a specific RFP.
     * @path /rfps/{rfpId}/proposals/{proposalId}
     * @allow get, list: if true; // Assuming any authenticated user can create. Adjust as needed.
     * @allow create: if isSignedIn(); // Allowing any authenticated user to create. Adjust as needed.
     * @allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny create: if false;
     * @principle Public read, owner-only writes (once ownership is implemented).
     */
    match /rfps/{rfpId}/proposals/{proposalId} {
      allow get, list: if true; // Publicly readable for now. Consider access control based on RFP/Contractor.
      allow create: if isSignedIn(); // Allowing any authenticated user to create. Adjust as needed.
      allow update, delete: if false; // TODO: Implement appropriate access control for proposal updates/deletes.
    }

    /**
     * @description Allows read access to all Contractors.
     * @path /contractors/{contractorId}
     * @allow get, list: if true;
     * @deny create, update, delete: if true; // Only Admins can create, update, and delete
     * @principle Public read, admin-only writes.
     */
    match /contractors/{contractorId} {
      allow get, list: if true;
      allow create, update, delete: if false; // Only Admins can create, update, and delete
    }

    /**
     * @description Allows read access to all Metro Codes.
     * @path /metro_codes/{metroCodeId}
     * @allow get, list: if true;
     * @deny create, update, delete: if true; // Only Admins can create, update, and delete
     * @principle Public read, admin-only writes.
     */
    match /metro_codes/{metroCodeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // Only Admins can create, update, and delete
    }

        /**
     * @description Allows a user to read and write their own user document.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false; // Listing users is not permitted.
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle User-owned data, strict ownership enforced.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }


    /**
     * @description Helper function to determine if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Helper function to determine if the current user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Helper function to determine if the current user is the existing owner of the resource.
     * @param {string} userId The user ID to compare against the request's authentication UID and the resource data.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}