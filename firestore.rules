/**
 * @fileoverview Firestore Security Rules for the MARCUS Automation Suite.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization based on resource ownership and hierarchical data structure.
 * It avoids complex data validation in favor of rapid prototyping and iteration.
 * Strict access control is enforced, defaulting to denial unless explicitly allowed.
 *
 * Data Structure:
 * - Top-level collections: /projects/{projectId}, /metroCodes/{metroCodeId}, /contractorTypes/{contractorTypeId}, /contractors/{contractorId}, /technicalDocuments/{technicalDocumentId}, /users/{userId}, /authorizedDomains/{authorizedDomainId}
 * - Subcollections: /projects/{projectId}/eoiEmails/{eoiEmailId}, /projects/{projectId}/rfpEmails/{rfpEmailId}, /projects/{projectId}/proposals/{proposalId}, /proposals/{proposalId}/scorecards/{scorecardId}, /users/{userId}/feedback/{feedbackId}
 * - AwardRecommendation documents are stored under /projects/{projectId}/awardRecommendation (note: singular document ID).
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed (no rule allows listing all users).
 * - Data shape validation is minimized to focus on authorization.
 * - Collections without clear ownership default to requiring authentication for writes.
 *
 * Denormalization for Authorization:
 * - Ownership: Documents in user subcollections (e.g., Feedback) should contain a `userId` field matching the parent path. This is enforced on creation and immutability is enforced on update.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource, and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read, but only the owner to write. Requires an 'ownerId' or 'authorId' field in the document.
     * @path /projects/{projectId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn()
     * @allow (update, delete): if isSignedIn()
     * @deny (create, update, delete): if the request is not authenticated, or the userId does not match.
     * @principle Public read, owner-only writes, authentication required for writes.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read, but requires authentication for writes.
     * @path /metroCodes/{metroCodeId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn()
     * @allow (update, delete): if isSignedIn()
     * @deny (create, update, delete): if the request is not authenticated.
     * @principle Public read, authentication required for writes.
     */
    match /metroCodes/{metroCodeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read, but requires authentication for writes.
     * @path /contractorTypes/{contractorTypeId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn();
     * @allow (update, delete): if isSignedIn();
     * @deny (create, update, delete): if the request is not authenticated.
     * @principle Public read, authentication required for writes.
     */
    match /contractorTypes/{contractorTypeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read, but requires authentication for writes.
     * @path /contractors/{contractorId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn()
     * @allow (update, delete): if isSignedIn()
     * @deny (create, update, delete): if the request is not authenticated.
     * @principle Public read, authentication required for writes.
     */
    match /contractors/{contractorId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to create, update and delete EOIEmails associated with a specific project.
     * @path /projects/{projectId}/eoiEmails/{eoiEmailId}
     * @allow (get, list): if isSignedIn()
     * @allow (create): if isSignedIn()
     * @allow (update, delete): if isSignedIn()
     * @deny (create, update, delete): if the request is not authenticated.
     * @principle Authentication required for all operations.
     */
    match /projects/{projectId}/eoiEmails/{eoiEmailId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to create, update and delete RFPEmails associated with a specific project.
     * @path /projects/{projectId}/rfpEmails/{rfpEmailId}
     * @allow (get, list): if isSignedIn()
     * @allow (create): if isSignedIn()
     * @allow (update, delete): if isSignedIn()
     * @deny (create, update, delete): if the request is not authenticated.
     * @principle Authentication required for all operations.
     */
    match /projects/{projectId}/rfpEmails/{rfpEmailId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to create, update and delete Proposals associated with a specific project.
     * @path /projects/{projectId}/proposals/{proposalId}
     * @allow (get, list): if isSignedIn()
     * @allow (create): if isSignedIn()
     * @allow (update, delete): if isSignedIn()
     * @deny (create, update, delete): if the request is not authenticated.
     * @principle Authentication required for all operations.
     */
    match /projects/{projectId}/proposals/{proposalId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to create, update and delete Scorecards associated with a specific proposal.
     * @path /proposals/{proposalId}/scorecards/{scorecardId}
     * @allow (get, list): if isSignedIn()
     * @allow (create): if isSignedIn()
     * @allow (update, delete): if isSignedIn()
     * @deny (create, update, delete): if the request is not authenticated.
     * @principle Authentication required for all operations.
     */
    match /proposals/{proposalId}/scorecards/{scorecardId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to create, update and delete AwardRecommendations associated with a specific project.
     * @path /projects/{projectId}/awardRecommendation
     * @allow (get): if isSignedIn()
     * @allow (create): if isSignedIn()
     * @allow (update, delete): if isSignedIn()
     * @deny (create, update, delete): if the request is not authenticated.
     * @principle Authentication required for all operations.
     */
    match /projects/{projectId}/awardRecommendation {
      allow get: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
      allow list: if false;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own feedback entries.
     * @path /users/{userId}/feedback/{feedbackId}
     * @allow (get, list): if isOwner(userId);
     * @allow (create): if isOwner(userId);
     * @allow (update, delete): if isExistingOwner(userId);
     * @deny (create): if the userId in the path does not match the user's auth UID.
     * @deny (update, delete): if the document does not exist, or the userId in the path does not match the user's auth UID.
     * @principle Enforces user-ownership for feedback entries.
     */
    match /users/{userId}/feedback/{feedbackId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read, but requires authentication for writes.
     * @path /technicalDocuments/{technicalDocumentId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn()
     * @allow (update, delete): if isSignedIn()
     * @deny (create, update, delete): if the request is not authenticated.
     * @principle Public read, authentication required for writes.
     */
    match /technicalDocuments/{technicalDocumentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows a user to create their own user document, and only allows them to read, update, and delete their own document.
     * @path /users/{userId}
     * @allow (get): if isOwner(userId);
     * @allow (create): if isOwner(userId);
     * @allow (update, delete): if isExistingOwner(userId);
     * @deny (create): if the userId in the path does not match the user's auth UID.
     * @deny (update, delete): if the document does not exist, or the userId in the path does not match the user's auth UID.
     * @principle Enforces user-ownership for user documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Allows anyone to read, but requires authentication for writes.
     * @path /authorizedDomains/{authorizedDomainId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn()
     * @allow (update, delete): if isSignedIn()
     * @deny (create, update, delete): if the request is not authenticated.
     * @principle Public read, authentication required for writes.
     */
    match /authorizedDomains/{authorizedDomainId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }
  }
}