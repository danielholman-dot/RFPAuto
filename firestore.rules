/**
 * @fileoverview Firestore Security Rules for the RFP Management Application.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for user-specific data
 * and allows public read access for certain collections like `rfps` and `contractors`.
 * Write access to public collections is restricted to authenticated users, enforcing
 * ownership based on a denormalized `ownerId` field within each document.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profiles, accessible only to the user themselves.
 * - `/rfps/{rfpId}`: Stores project data, publicly readable, but owner-writeable.
 * - `/rfps/{rfpId}/proposals/{proposalId}`: Stores proposals for a specific RFP, only accessible if the user is the contractor that submitted the proposal
 * - `/contractors/{contractorId}`: Stores contractor profiles, publicly readable, but owner-writeable.
 * - `/metro_codes/{metroCodeId}`: Stores metro code data, publicly readable.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to the `rfps`, `contractors`, and `metro_codes` collections.
 * - Owner-only write access is enforced on `rfps` and `contractors` via an `ownerId` field.
 * - The `users` collection is strictly user-owned.
 *
 * Denormalization for Authorization:
 * - The `rfps` and `contractors` collections MUST contain an `ownerId` field to
 *   allow for secure write access. This avoids costly `get()` calls to other
 *   collections to determine ownership.
 *
 * Structural Segregation:
 * - Publicly readable data (RFPs, contractors, metro codes) is stored in top-level
 *   collections to allow for simple and performant list operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication is required for certain actions.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user-specific data access.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

        /**
     * @description Checks if the user ID matches the authenticated user's ID and resource exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - Authenticated user can create their own user document.
     * @allow (get, update, delete) - Authenticated user can access/modify their own user document.
     * @deny (create) - If the user ID in the document does not match the authenticated user's ID.
     * @deny (get, update, delete) - If the user is not the owner of the document.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /rfps/{rfpId} collection.
     * @path /databases/{database}/documents/rfps/{rfpId}
     * @allow (get, list) - Anyone can read RFP data.
     * @allow (create) - Authenticated user can create a new RFP.
     * @allow (update, delete) - Only the owner can update or delete an RFP.
     * @deny (create) - If the ownerId in the document does not match the authenticated user's ID.
     * @deny (update, delete) - If the user is not the owner of the document.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /rfps/{rfpId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false;  // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false;  // TODO: Add owner validation once the schema is updated with an ownership field.
    }

     /**
      * @description Rules for the /rfps/{rfpId}/proposals/{proposalId} subcollection.
      * @path /databases/{database}/documents/rfps/{rfpId}/proposals/{proposalId}
      * @allow (get, list) - Authenticated user can read their own proposals.
      * @allow (create) - Authenticated user can create a proposal for an RFP.
      * @allow (update, delete) - Only the contractor who created the proposal can update or delete it.
      * @deny (create) - If the contractorId in the document does not match the authenticated user's ID.
      * @deny (update, delete) - If the user is not the owner of the document.
      * @principle Allows public read access but restricts write access to the owner.
      */
    match /rfps/{rfpId}/proposals/{proposalId} {
        allow get: if request.auth.uid == resource.data.contractorId;
        allow list: if request.auth.uid == resource.data.contractorId;
        allow create: if isSignedIn() && request.resource.data.contractorId == request.auth.uid;
        allow update: if request.auth.uid == resource.data.contractorId && resource != null;
        allow delete: if request.auth.uid == resource.data.contractorId && resource != null;
    }

    /**
     * @description Rules for the /contractors/{contractorId} collection.
     * @path /databases/{database}/documents/contractors/{contractorId}
     * @allow (get, list) - Anyone can read contractor data.
     * @allow (create) - Authenticated user can create a new contractor profile.
     * @allow (update, delete) - Only the owner can update or delete their contractor profile.
     * @deny (create) - If the ownerId in the document does not match the authenticated user's ID.
     * @deny (update, delete) - If the user is not the owner of the document.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /contractors/{contractorId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false;  // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false;  // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /metro_codes/{metroCodeId} collection.
     * @path /databases/{database}/documents/metro_codes/{metroCodeId}
     * @allow (get, list) - Anyone can read metro code data.
     * @deny (create, update, delete) - No one can create, update, or delete metro codes through the client.
     * @principle Allows public read access but prohibits write access.
     */
    match /metro_codes/{metroCodeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}