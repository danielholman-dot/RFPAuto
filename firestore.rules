/**
 * @fileoverview Firestore Security Rules for the RFP application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control.
 * It leverages denormalization to optimize rule performance and avoid costly `get()` operations.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /rfps/{rfpId}: Stores project information (RFPs), publicly readable but writable only by authorized users (TODO: Define authorization).
 * - /rfps/{rfpId}/proposals/{proposalId}: Stores proposals submitted for each RFP, writable only by the contractor who submitted the proposal.
 * - /contractors/{contractorId}: Stores contractor profiles, publicly readable (for discovery) but writable only by the contractor themselves.
 * - /metro_codes/{metroCodeId}: Stores metro codes, publicly readable.
 * - /RFP_Weighting_evaluation/{rfpId}: Stores evaluation checklist configurations for RFPs, writable by authorized users (TODO: Define authorization).
 *
 * Key Security Decisions:
 * - User listing is disabled to protect user privacy.
 * - Public read access is granted to /metro_codes/{metroCodeId} as it is considered public data.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 * - RFP documents should include an `ownerId` field to simplify owner-based access control for writes.
 *
 * Structural Segregation:
 * - Private user data is stored under /users/{userId} to ensure only the user can access it.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Verifies user authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource, based on user ID.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Enforces ownership-based access control.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the existing owner of the resource, ensuring that the resource exists and the user is the owner.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Combines ownership and existence checks for safer destructive operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Rules for the /metro_codes/{metroCodeId} collection.
     * @path /metro_codes/{metroCodeId}
     * @allow (list) Any user can list metro codes.
     * @allow (get) Any user can get a metro code.
     * @deny (create) No one can create metro codes through client-side rules.
     * @deny (update) No one can update metro codes through client-side rules.
     * @deny (delete) No one can delete metro codes through client-side rules.
     * @principle Public read access for metro codes.
     */
    match /metro_codes/{metroCodeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) A user can create their own profile.
     * @allow (get) A user can get their own profile.
     * @allow (update) A user can update their own profile.
     * @deny (create) A user cannot create a profile for another user.
     * @deny (get) A user cannot get another user's profile.
     * @deny (update) A user cannot update another user's profile.
     * @deny (delete) A user cannot delete another user's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get, update, delete: if isExistingOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not permitted.
    }

    /**
     * @description Rules for the /rfps/{rfpId} collection.
     * @path /rfps/{rfpId}
     * @allow (get, list) Any user can read RFP details.
     * @deny (create, update, delete) Only authorized users can create, update, or delete RFPs (TODO: implement authorization).
     * @principle Public read access with owner-only writes (TODO: implement authorization).
     */
    match /rfps/{rfpId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /rfps/{rfpId}/proposals/{proposalId} subcollection.
     * @path /rfps/{rfpId}/proposals/{proposalId}
     * @allow (create) A contractor can create a proposal for a specific RFP if the contractorId matches their auth ID.
     * @allow (get) Any user can read a proposal.
     * @allow (update, delete) Only the contractor who created the proposal can update or delete it.
     * @deny (create) A contractor cannot create a proposal for another contractor.
     * @principle Contractor can only create their own proposals. Only the proposal owner can update or delete.
     */
    match /rfps/{rfpId}/proposals/{proposalId} {
      allow get: if true;
      allow create: if isSignedIn() && request.resource.data.contractorId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.contractorId == request.auth.uid && resource != null;
      allow list: if true;
    }

    /**
     * @description Rules for the /contractors/{contractorId} collection.
     * @path /contractors/{contractorId}
     * @allow (get, list) Any user can read contractor profiles.
     * @allow (create) A contractor can create their own profile.
     * @allow (update, delete) A contractor can update or delete their own profile.
     * @deny (create) A user cannot create a contractor profile for another contractor.
     * @deny (get) A user cannot get another user's profile.
     * @deny (update) A user cannot update another user's profile.
     * @principle Enforces document ownership for writes, allows public reads for contractor discovery.
     */
    match /contractors/{contractorId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(contractorId);
      allow update, delete: if isExistingOwner(contractorId);
    }

    /**
     * @description Rules for the /RFP_Weighting_evaluation/{rfpId} collection.
     * @path /RFP_Weighting_evaluation/{rfpId}
     * @deny (create, get, list, update, delete) No access is granted
     * @principle Access Denied to all operations.
     */
      match /RFP_Weighting_evaluation/{rfpId} {
        allow get, list, create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      }
  }
}