{
  "entities": {
    "Project": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project",
      "type": "object",
      "description": "Represents a project within the MARCUS Automation Suite.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Project entity."
        },
        "projectName": {
          "type": "string",
          "description": "The name of the project."
        },
        "scopeOfWork": {
          "type": "string",
          "description": "The scope of work for the project."
        },
        "metroCode": {
          "type": "string",
          "description": "The metro code for the project's location."
        },
        "contractorType": {
          "type": "string",
          "description": "The type of contractor required for the project."
        },
        "estimatedBudget": {
          "type": "number",
          "description": "The estimated budget for the project."
        },
        "startDate": {
          "type": "string",
          "description": "The planned start date for the project.",
          "format": "date-time"
        },
        "technicalDocumentIds": {
          "type": "array",
          "description": "References to TechnicalDocuments. (Relationship: Project 1:N TechnicalDocument)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "projectName",
        "scopeOfWork",
        "metroCode",
        "contractorType",
        "estimatedBudget",
        "startDate"
      ]
    },
    "Contractor": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Contractor",
      "type": "object",
      "description": "Represents a contractor available for projects.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Contractor entity."
        },
        "companyName": {
          "type": "string",
          "description": "The name of the contractor's company."
        },
        "contactName": {
          "type": "string",
          "description": "The name of the contractor's contact person."
        },
        "contactEmail": {
          "type": "string",
          "description": "The email address of the contractor's contact person.",
          "format": "email"
        },
        "contactPhone": {
          "type": "string",
          "description": "The phone number of the contractor's contact person."
        },
        "metroCodes": {
          "type": "array",
          "description": "Metro codes the contractor operates in.",
          "items": {
            "type": "string"
          }
        },
        "contractorType": {
          "type": "string",
          "description": "Type of contractor (e.g., electrical, plumbing)."
        }
      },
      "required": [
        "id",
        "companyName",
        "contactName",
        "contactEmail",
        "contactPhone",
        "metroCodes",
        "contractorType"
      ]
    },
    "EOIEmail": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EOIEmail",
      "type": "object",
      "description": "Represents an Expression of Interest (EOI) email sent to a contractor.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the EOIEmail entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N EOIEmail)"
        },
        "contractorId": {
          "type": "string",
          "description": "Reference to Contractor. (Relationship: Contractor 1:N EOIEmail)"
        },
        "sentDate": {
          "type": "string",
          "description": "The date the EOI email was sent.",
          "format": "date-time"
        },
        "emailBody": {
          "type": "string",
          "description": "The body of the EOI email."
        },
        "emailSubject": {
          "type": "string",
          "description": "The subject of the EOI email."
        }
      },
      "required": [
        "id",
        "projectId",
        "contractorId",
        "sentDate",
        "emailBody",
        "emailSubject"
      ]
    },
    "RFP": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RFP",
      "type": "object",
      "description": "Represents a Request for Proposal (RFP) sent to contractors.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the RFP entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N RFP)"
        },
        "contractorId": {
          "type": "string",
          "description": "Reference to Contractor. (Relationship: Contractor 1:N RFP)"
        },
        "rfpInstructions": {
          "type": "string",
          "description": "The instructions for the RFP."
        },
        "sentDate": {
          "type": "string",
          "description": "The date the RFP was sent.",
          "format": "date-time"
        },
        "dueDate": {
          "type": "string",
          "description": "The due date for proposal submissions.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "projectId",
        "contractorId",
        "rfpInstructions",
        "sentDate",
        "dueDate"
      ]
    },
    "Proposal": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Proposal",
      "type": "object",
      "description": "Represents a proposal submitted by a contractor.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Proposal entity."
        },
        "rfpId": {
          "type": "string",
          "description": "Reference to RFP. (Relationship: RFP 1:N Proposal)"
        },
        "submissionDate": {
          "type": "string",
          "description": "The date the proposal was submitted.",
          "format": "date-time"
        },
        "content": {
          "type": "string",
          "description": "The content of the proposal."
        },
        "scorecardId": {
          "type": "string",
          "description": "Reference to Scorecard. (Relationship: Scorecard 1:1 Proposal)"
        }
      },
      "required": [
        "id",
        "rfpId",
        "submissionDate",
        "content"
      ]
    },
    "Scorecard": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Scorecard",
      "type": "object",
      "description": "Represents a scorecard for evaluating proposals.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Scorecard entity."
        },
        "safety": {
          "type": "number",
          "description": "Score for safety."
        },
        "experience": {
          "type": "number",
          "description": "Score for experience."
        },
        "programmaticApproach": {
          "type": "number",
          "description": "Score for programmatic approach."
        },
        "commercialExcellence": {
          "type": "number",
          "description": "Score for commercial excellence."
        },
        "innovativeSolutions": {
          "type": "number",
          "description": "Score for innovative solutions."
        },
        "missionCriticalExperience": {
          "type": "number",
          "description": "Score for mission critical experience."
        }
      },
      "required": [
        "id",
        "safety",
        "experience",
        "programmaticApproach",
        "commercialExcellence",
        "innovativeSolutions",
        "missionCriticalExperience"
      ]
    },
    "AwardRecommendation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AwardRecommendation",
      "type": "object",
      "description": "Represents the recommendation for awarding a project.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the AwardRecommendation entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N AwardRecommendation)"
        },
        "contractorId": {
          "type": "string",
          "description": "Reference to Contractor. (Relationship: Contractor 1:N AwardRecommendation)"
        },
        "recommendationReason": {
          "type": "string",
          "description": "The reason for the award recommendation."
        },
        "srmUpdate": {
          "type": "string",
          "description": "The update to the Supplier Relationship Management (SRM) system."
        }
      },
      "required": [
        "id",
        "projectId",
        "contractorId",
        "recommendationReason",
        "srmUpdate"
      ]
    },
    "Feedback": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Feedback",
      "type": "object",
      "description": "Represents feedback collected from stakeholders and contractors.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Feedback entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N Feedback)"
        },
        "userId": {
          "type": "string",
          "description": "The id of the User that submitted the feedback."
        },
        "feedbackText": {
          "type": "string",
          "description": "The text of the feedback."
        },
        "feedbackDate": {
          "type": "string",
          "description": "The date the feedback was submitted.",
          "format": "date-time"
        },
        "stakeholderType": {
          "type": "string",
          "description": "The type of stakeholder providing the feedback (e.g., internal, contractor)."
        }
      },
      "required": [
        "id",
        "projectId",
        "userId",
        "feedbackText",
        "feedbackDate",
        "stakeholderType"
      ]
    },
    "TechnicalDocument": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TechnicalDocument",
      "type": "object",
      "description": "Represents a technical document associated with a project.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the TechnicalDocument entity."
        },
        "documentName": {
          "type": "string",
          "description": "The name of the technical document."
        },
        "documentType": {
          "type": "string",
          "description": "The type of technical document (e.g., PDF, DOCX)."
        },
        "uploadDate": {
          "type": "string",
          "description": "The date the technical document was uploaded.",
          "format": "date-time"
        },
        "fileLocation": {
          "type": "string",
          "description": "The location where the technical document is stored."
        }
      },
      "required": [
        "id",
        "documentName",
        "documentType",
        "uploadDate",
        "fileLocation"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the MARCUS Automation Suite.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the user."
        },
        "role": {
          "type": "string",
          "description": "The role of the user (e.g., admin, project manager)."
        }
      },
      "required": [
        "id",
        "email",
        "firstName",
        "lastName",
        "role"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. Uses path-based ownership for individual user data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/backend/entities/Project"
          },
          "description": "Stores project information.  Acts as the root for all project-related subcollections.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/technical_documents/{technicalDocumentId}",
        "definition": {
          "entityName": "TechnicalDocument",
          "schema": {
            "$ref": "#/backend/entities/TechnicalDocument"
          },
          "description": "Stores technical documents associated with a project. Access controlled via project ownership.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            },
            {
              "name": "technicalDocumentId",
              "description": "The unique identifier of the technical document."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/eoi_emails/{eoiEmailId}",
        "definition": {
          "entityName": "EOIEmail",
          "schema": {
            "$ref": "#/backend/entities/EOIEmail"
          },
          "description": "Stores Expression of Interest (EOI) emails for a project. Access controlled via project ownership.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            },
            {
              "name": "eoiEmailId",
              "description": "The unique identifier of the EOI email."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/rfps/{rfpId}",
        "definition": {
          "entityName": "RFP",
          "schema": {
            "$ref": "#/backend/entities/RFP"
          },
          "description": "Stores Request for Proposals (RFPs) for a project. Access controlled via project ownership.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            },
            {
              "name": "rfpId",
              "description": "The unique identifier of the RFP."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/rfps/{rfpId}/proposals/{proposalId}",
        "definition": {
          "entityName": "Proposal",
          "schema": {
            "$ref": "#/backend/entities/Proposal"
          },
          "description": "Stores proposals submitted for an RFP. Access controlled via project ownership.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            },
            {
              "name": "rfpId",
              "description": "The unique identifier of the RFP."
            },
            {
              "name": "proposalId",
              "description": "The unique identifier of the proposal."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/rfps/{rfpId}/proposals/{proposalId}/scorecard",
        "definition": {
          "entityName": "Scorecard",
          "schema": {
            "$ref": "#/backend/entities/Scorecard"
          },
          "description": "Stores the scorecard for a proposal. Access controlled via project ownership.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            },
            {
              "name": "rfpId",
              "description": "The unique identifier of the RFP."
            },
            {
              "name": "proposalId",
              "description": "The unique identifier of the proposal."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/award_recommendations/{awardRecommendationId}",
        "definition": {
          "entityName": "AwardRecommendation",
          "schema": {
            "$ref": "#/backend/entities/AwardRecommendation"
          },
          "description": "Stores award recommendations for a project. Access controlled via project ownership.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            },
            {
              "name": "awardRecommendationId",
              "description": "The unique identifier of the award recommendation."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/feedback/{feedbackId}",
        "definition": {
          "entityName": "Feedback",
          "schema": {
            "$ref": "#/backend/entities/Feedback"
          },
          "description": "Stores feedback for a project. Access controlled via project ownership.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            },
            {
              "name": "feedbackId",
              "description": "The unique identifier of the feedback."
            }
          ]
        }
      },
      {
        "path": "/contractors/{contractorId}",
        "definition": {
          "entityName": "Contractor",
          "schema": {
            "$ref": "#/backend/entities/Contractor"
          },
          "description": "Stores contractor profiles.  Publicly accessible contractor data.",
          "params": [
            {
              "name": "contractorId",
              "description": "The unique identifier of the contractor."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to prioritize authorization independence, clarity, and scalability. It leverages denormalization and structural segregation to achieve these goals.\n\n**Authorization Independence:**\nTo eliminate `get()` calls in security rules and enable atomic operations, authorization context is denormalized. For instance, access to `EOIEmails`, `RFPs`, `Proposals`, `Scorecards`, `AwardRecommendations`, `Feedbacks`, and `TechnicalDocuments` is determined by the `Project`. Therefore, these collections are created as subcollections of `Project` (e.g., `/projects/{projectId}/rfps/{rfpId}`). This allows us to check the user's access to the project and, transitively, to the other documents in the Project's subcollections.\n\n**Structural Segregation:**\nThe structure ensures that all documents within a collection share the same security requirements. For example, `Users` are stored in a dedicated `/users/{userId}` collection, separate from projects, contractors or other entities. Each project has its own subcollections (e.g., `rfps`, `proposals`) to maintain a clear security posture.\n\n**Access Modeling:**\nThe structure uses path-based ownership for user-owned data (`/users/{userId}`).  Project-related data utilizes hierarchical paths (e.g., `/projects/{projectId}/rfps/{rfpId}`) to represent the `Project 1:N RFP` relationship.  Collaborative access is implicit via project ownership. If a user has access to a project, they implicitly have access to the project's subcollections.\n\n**QAPs (Rules are not Filters):**\nThe structure enables secure `list` operations by segregating data based on access requirements. Only users with access to a given project can list the subcollections within that project. Because access is defined through the project, there's no need to filter based on user attributes within the rules themselves.\n\n**Invariants:**\nThe structure supports the integrity of ownership by explicitly associating data with projects using hierarchical paths. Timestamps (e.g., `sentDate`, `submissionDate`) are included in relevant entities to track the history of interactions. Denormalized data (e.g., project information in subcollections) helps maintain data consistency and improves query performance.\n\nThe structure efficiently supports the core features of the MARCUS Automation Suite. Project intake, contractor selection, EOI email generation, RFP management, proposal submission, analysis, scoring, award recommendations, feedback collection, and dashboards are all facilitated by the organized and secure data model. The design will prevent the \"auth/operation-not-allowed\" error, which is likely caused by malformed security rules attempting to read data the user doesn't have access to or performing incorrect operations based on role/permission settings."
  }
}