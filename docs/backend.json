{
  "entities": {
    "Project": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project",
      "type": "object",
      "description": "Represents a project within the MARCUS Automation Suite.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Project entity."
        },
        "projectName": {
          "type": "string",
          "description": "The name of the project."
        },
        "scopeOfWork": {
          "type": "string",
          "description": "The scope of work for the project."
        },
        "metroCodeId": {
          "type": "string",
          "description": "Reference to MetroCode. (Relationship: MetroCode 1:N Project)"
        },
        "contractorTypeId": {
          "type": "string",
          "description": "Reference to ContractorType. (Relationship: ContractorType 1:N Project)"
        },
        "estimatedBudget": {
          "type": "number",
          "description": "The estimated budget for the project."
        },
        "startDate": {
          "type": "string",
          "description": "The start date of the project.",
          "format": "date-time"
        },
        "technicalDocumentIds": {
          "type": "array",
          "description": "References to TechnicalDocuments. (Relationship: TechnicalDocument N:N Project)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "projectName",
        "scopeOfWork",
        "metroCodeId",
        "contractorTypeId",
        "estimatedBudget",
        "startDate"
      ]
    },
    "Contractor": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Contractor",
      "type": "object",
      "description": "Represents a contractor in the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Contractor entity."
        },
        "companyName": {
          "type": "string",
          "description": "The name of the contractor's company."
        },
        "contactName": {
          "type": "string",
          "description": "The name of the contractor's contact person."
        },
        "contactEmail": {
          "type": "string",
          "description": "The email address of the contractor's contact person.",
          "format": "email"
        },
        "contactPhone": {
          "type": "string",
          "description": "The phone number of the contractor's contact person."
        },
        "metroCodeIds": {
          "type": "array",
          "description": "References to MetroCodes. (Relationship: MetroCode N:N Contractor)",
          "items": {
            "type": "string"
          }
        },
        "contractorTypeIds": {
          "type": "array",
          "description": "References to ContractorTypes. (Relationship: ContractorType N:N Contractor)",
          "items": {
            "type": "string"
          }
        },
        "preferred": {
          "type": "boolean",
          "description": "Indicates if the contractor is preferred."
        }
      },
      "required": [
        "id",
        "companyName",
        "contactName",
        "contactEmail",
        "contactPhone"
      ]
    },
    "MetroCode": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MetroCode",
      "type": "object",
      "description": "Represents a metro code.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the MetroCode entity."
        },
        "code": {
          "type": "string",
          "description": "The metro code."
        },
        "description": {
          "type": "string",
          "description": "A description of the metro code."
        }
      },
      "required": [
        "id",
        "code",
        "description"
      ]
    },
    "ContractorType": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContractorType",
      "type": "object",
      "description": "Represents a type of contractor.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ContractorType entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the contractor type."
        },
        "description": {
          "type": "string",
          "description": "A description of the contractor type."
        }
      },
      "required": [
        "id",
        "name",
        "description"
      ]
    },
    "TechnicalDocument": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TechnicalDocument",
      "type": "object",
      "description": "Represents a technical document associated with a project.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the TechnicalDocument entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the document."
        },
        "url": {
          "type": "string",
          "description": "The URL or path to access the document.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "name",
        "url"
      ]
    },
    "Proposal": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Proposal",
      "type": "object",
      "description": "Represents a proposal submitted by a contractor for a project.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Proposal entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N Proposal)"
        },
        "contractorId": {
          "type": "string",
          "description": "Reference to Contractor. (Relationship: Contractor 1:N Proposal)"
        },
        "submissionDate": {
          "type": "string",
          "description": "The date the proposal was submitted.",
          "format": "date-time"
        },
        "content": {
          "type": "string",
          "description": "The content of the proposal."
        },
        "scorecardId": {
          "type": "string",
          "description": "Reference to Scorecard. (Relationship: Scorecard 1:1 Proposal)"
        }
      },
      "required": [
        "id",
        "projectId",
        "contractorId",
        "submissionDate",
        "content"
      ]
    },
    "Scorecard": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Scorecard",
      "type": "object",
      "description": "Represents the scorecard for evaluating a proposal.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Scorecard entity."
        },
        "safety": {
          "type": "number",
          "description": "Score for safety."
        },
        "experience": {
          "type": "number",
          "description": "Score for experience."
        },
        "programmaticApproach": {
          "type": "number",
          "description": "Score for programmatic approach."
        },
        "commercialExcellence": {
          "type": "number",
          "description": "Score for commercial excellence."
        },
        "innovativeSolutions": {
          "type": "number",
          "description": "Score for innovative solutions."
        },
        "missionCriticalExperience": {
          "type": "number",
          "description": "Score for mission critical experience."
        }
      },
      "required": [
        "id"
      ]
    },
    "RfpEmail": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RfpEmail",
      "type": "object",
      "description": "Represents an RFP email that is sent out.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the RFPEmail entity."
        },
        "contractorId": {
          "type": "string",
          "description": "Reference to Contractor. (Relationship: Contractor 1:N RfpEmail)"
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N RfpEmail)"
        },
        "emailContent": {
          "type": "string",
          "description": "The content of the RFP email."
        },
        "approvalStatus": {
          "type": "string",
          "description": "The approval status of the email (e.g., pending, approved, rejected)."
        },
        "sentDate": {
          "type": "string",
          "description": "The date the email was sent.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "contractorId",
        "projectId",
        "emailContent",
        "approvalStatus"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user in the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "username": {
          "type": "string",
          "description": "The username of the user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        }
      },
      "required": [
        "id",
        "username",
        "email"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles.  Access is restricted to the user themselves.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/backend/entities/Project"
          },
          "description": "Stores project data.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/proposals/{proposalId}",
        "definition": {
          "entityName": "Proposal",
          "schema": {
            "$ref": "#/backend/entities/Proposal"
          },
          "description": "Stores proposals for a given project. Includes denormalized 'projectId' and 'contractorId' for authorization independence.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            },
            {
              "name": "proposalId",
              "description": "The unique identifier of the proposal."
            }
          ]
        }
      },
      {
        "path": "/contractors/{contractorId}",
        "definition": {
          "entityName": "Contractor",
          "schema": {
            "$ref": "#/backend/entities/Contractor"
          },
          "description": "Stores contractor profiles.",
          "params": [
            {
              "name": "contractorId",
              "description": "The unique identifier of the contractor."
            }
          ]
        }
      },
      {
        "path": "/metro_codes/{metroCodeId}",
        "definition": {
          "entityName": "MetroCode",
          "schema": {
            "$ref": "#/backend/entities/MetroCode"
          },
          "description": "Stores metro codes.",
          "params": [
            {
              "name": "metroCodeId",
              "description": "The unique identifier of the metro code."
            }
          ]
        }
      },
      {
        "path": "/contractor_types/{contractorTypeId}",
        "definition": {
          "entityName": "ContractorType",
          "schema": {
            "$ref": "#/backend/entities/ContractorType"
          },
          "description": "Stores contractor types.",
          "params": [
            {
              "name": "contractorTypeId",
              "description": "The unique identifier of the contractor type."
            }
          ]
        }
      },
      {
        "path": "/technical_documents/{technicalDocumentId}",
        "definition": {
          "entityName": "TechnicalDocument",
          "schema": {
            "$ref": "#/backend/entities/TechnicalDocument"
          },
          "description": "Stores technical documents.",
          "params": [
            {
              "name": "technicalDocumentId",
              "description": "The unique identifier of the technical document."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/rfp_emails/{rfpEmailId}",
        "definition": {
          "entityName": "RfpEmail",
          "schema": {
            "$ref": "#/backend/entities/RfpEmail"
          },
          "description": "Stores RFP emails associated with a project.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            },
            {
              "name": "rfpEmailId",
              "description": "The unique identifier of the RFP email."
            }
          ]
        }
      },
      {
        "path": "/proposals/{proposalId}/scorecard",
        "definition": {
          "entityName": "Scorecard",
          "schema": {
            "$ref": "#/backend/entities/Scorecard"
          },
          "description": "Stores scorecards. Note that a proposal can only have one scorecard so placing it as a subcollection of proposals allows easier data fetching when wanting to update it.",
          "params": [
            {
              "name": "proposalId",
              "description": "The unique identifier of the proposal."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure authorization independence, clarity, and scalability, aligning with the core design principles. It leverages structural segregation and denormalization strategies to optimize security and query performance. Each collection is designed to have a homogeneous security posture, simplifying security rule creation. The structure uses path-based ownership where appropriate and membership maps for collaborative data access, enhancing maintainability and security.\n\n**Authorization Independence and QAPs:**\n*   Authorization independence is achieved by avoiding `get()` calls in the security rules. Instead, relevant authorization data is denormalized into subcollections. For example, if `Proposals` need access control based on `Project` membership, the relevant project membership data will be copied into each `Proposal` document.\n*   QAPs are supported by ensuring that listing operations can be secured without relying on filtering data in the rules. Structural segregation is used to isolate data with different access requirements.  For example, contractors can have access to their own submitted proposals under their user document, while project managers can access all proposals under the corresponding project document.\n\n**Explanation of Paths and Design Decisions:**\n*   `/users/{userId}`: This collection stores user profiles, which are private to each user. This path-based ownership simplifies security rules.\n*   `/projects/{projectId}`: This collection stores project data.  The project documents do NOT contain any membership information. Subcollections are used to manage access control and related data.\n*   `/projects/{projectId}/proposals/{proposalId}`: This subcollection stores proposals for a given project. This structure enables direct access to proposals related to a project. The `proposal` documents should contain a denormalized copy of the `projectId`, and the `contractorId` for rules and query purposes. This supports Authorization Independence.\n*   `/contractors/{contractorId}`: This collection stores contractor profiles.  This allows easy listing of contractors.  The profile includes general contact information.\n*   `/metro_codes/{metroCodeId}`, `/contractor_types/{contractorTypeId}`, `/technical_documents/{technicalDocumentId}`: These collections store master data for metro codes, contractor types, and technical documents, respectively. They are globally accessible but updates are restricted via security rules (not specified here)."
  }
}