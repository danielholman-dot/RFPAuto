{
  "entities": {
    "Project": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project",
      "type": "object",
      "description": "Represents a project within the MARCUS Automation Suite.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Project entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the project."
        },
        "scopeOfWork": {
          "type": "string",
          "description": "A description of the work to be performed for the project."
        },
        "metroCodeId": {
          "type": "string",
          "description": "Reference to MetroCode. (Relationship: MetroCode 1:N Project)"
        },
        "contractorTypeId": {
          "type": "string",
          "description": "Reference to ContractorType. (Relationship: ContractorType 1:N Project)"
        },
        "estimatedBudget": {
          "type": "number",
          "description": "The estimated budget for the project."
        },
        "startDate": {
          "type": "string",
          "description": "The planned start date for the project.",
          "format": "date-time"
        },
        "technicalDocumentIds": {
          "type": "array",
          "description": "References to TechnicalDocument. (Relationship: Project 1:N TechnicalDocument)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "name",
        "scopeOfWork",
        "metroCodeId",
        "contractorTypeId",
        "estimatedBudget",
        "startDate"
      ]
    },
    "MetroCode": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MetroCode",
      "type": "object",
      "description": "Represents a metro code.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the MetroCode entity."
        },
        "code": {
          "type": "string",
          "description": "The metro code itself."
        },
        "name": {
          "type": "string",
          "description": "The name or description of the metro area."
        }
      },
      "required": [
        "id",
        "code",
        "name"
      ]
    },
    "ContractorType": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContractorType",
      "type": "object",
      "description": "Represents a type of contractor.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ContractorType entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the contractor type (e.g., 'Electrical', 'Plumbing')."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "Contractor": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Contractor",
      "type": "object",
      "description": "Represents a contractor in the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Contractor entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the contractor company."
        },
        "contactInformation": {
          "type": "string",
          "description": "Contact details for the contractor."
        },
        "metroCodeIds": {
          "type": "array",
          "description": "References to MetroCodes served by the contractor. (Relationship: MetroCode N:N Contractor)",
          "items": {
            "type": "string"
          }
        },
        "contractorTypeIds": {
          "type": "array",
          "description": "References to ContractorTypes associated with the contractor. (Relationship: ContractorType N:N Contractor)",
          "items": {
            "type": "string"
          }
        },
        "preferred": {
          "type": "boolean",
          "description": "If the contractor is on the preferred list."
        }
      },
      "required": [
        "id",
        "name",
        "contactInformation"
      ]
    },
    "EOIEmail": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EOIEmail",
      "type": "object",
      "description": "Represents an Expression of Interest (EOI) email.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the EOIEmail entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N EOIEmail)"
        },
        "contractorId": {
          "type": "string",
          "description": "Reference to Contractor. (Relationship: Contractor 1:N EOIEmail)"
        },
        "sentDate": {
          "type": "string",
          "description": "The date the EOI email was sent.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "The status of the EOI email (e.g., 'Sent', 'Replied', 'No Response')."
        }
      },
      "required": [
        "id",
        "projectId",
        "contractorId",
        "sentDate",
        "status"
      ]
    },
    "RFPEmail": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RFPEmail",
      "type": "object",
      "description": "Represents an Request for Proposal (RFP) email.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the RFPEmail entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N RFPEmail)"
        },
        "contractorId": {
          "type": "string",
          "description": "Reference to Contractor. (Relationship: Contractor 1:N RFPEmail)"
        },
        "sentDate": {
          "type": "string",
          "description": "The date the RFP email was sent.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "The status of the RFP email (e.g., 'Sent', 'Replied', 'No Response')."
        }
      },
      "required": [
        "id",
        "projectId",
        "contractorId",
        "sentDate",
        "status"
      ]
    },
    "Proposal": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Proposal",
      "type": "object",
      "description": "Represents a proposal submitted by a contractor.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Proposal entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N Proposal)"
        },
        "contractorId": {
          "type": "string",
          "description": "Reference to Contractor. (Relationship: Contractor 1:N Proposal)"
        },
        "submissionDate": {
          "type": "string",
          "description": "The date the proposal was submitted.",
          "format": "date-time"
        },
        "content": {
          "type": "string",
          "description": "The content of the proposal (e.g., a link to the document, or the text itself)."
        }
      },
      "required": [
        "id",
        "projectId",
        "contractorId",
        "submissionDate",
        "content"
      ]
    },
    "Scorecard": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Scorecard",
      "type": "object",
      "description": "Represents a scorecard for a proposal.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Scorecard entity."
        },
        "proposalId": {
          "type": "string",
          "description": "Reference to Proposal. (Relationship: Proposal 1:N Scorecard)"
        },
        "safetyScore": {
          "type": "number",
          "description": "The safety score for the proposal."
        },
        "experienceScore": {
          "type": "number",
          "description": "The experience score for the proposal."
        },
        "programmaticApproachScore": {
          "type": "number",
          "description": "The programmatic approach score for the proposal."
        },
        "commercialExcellenceScore": {
          "type": "number",
          "description": "The commercial excellence score for the proposal."
        },
        "innovativeSolutionsScore": {
          "type": "number",
          "description": "The innovative solutions score for the proposal."
        },
        "missionCriticalExperienceScore": {
          "type": "number",
          "description": "The mission critical experience score for the proposal."
        }
      },
      "required": [
        "id",
        "proposalId"
      ]
    },
    "AwardRecommendation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AwardRecommendation",
      "type": "object",
      "description": "Represents an award recommendation based on proposal analysis.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the AwardRecommendation entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:1 AwardRecommendation)"
        },
        "contractorId": {
          "type": "string",
          "description": "Reference to Contractor.  The recommended contractor. (Relationship: Contractor 1:1 AwardRecommendation)"
        },
        "justification": {
          "type": "string",
          "description": "The justification for the award recommendation."
        }
      },
      "required": [
        "id",
        "projectId",
        "contractorId",
        "justification"
      ]
    },
    "Feedback": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Feedback",
      "type": "object",
      "description": "Represents feedback collected from stakeholders and contractors.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Feedback entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N Feedback)"
        },
        "userId": {
          "type": "string",
          "description": "Reference to User.  The user providing the feedback. (Relationship: User 1:N Feedback)"
        },
        "feedbackText": {
          "type": "string",
          "description": "The text of the feedback."
        },
        "rating": {
          "type": "number",
          "description": "A numerical rating provided in the feedback."
        }
      },
      "required": [
        "id",
        "projectId",
        "userId",
        "feedbackText"
      ]
    },
    "TechnicalDocument": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TechnicalDocument",
      "type": "object",
      "description": "Represents a technical document associated with a project.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the TechnicalDocument entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the technical document."
        },
        "url": {
          "type": "string",
          "description": "The URL or path to the technical document.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "name",
        "url"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the MARCUS Automation Suite.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "name": {
          "type": "string",
          "description": "The full name of the user."
        },
        "role": {
          "type": "string",
          "description": "The role of the user within the system (e.g., 'Stakeholder', 'Admin')."
        }
      },
      "required": [
        "id",
        "email",
        "name",
        "role"
      ]
    },
    "AuthorizedDomain": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AuthorizedDomain",
      "type": "object",
      "description": "Represents an authorized domain that can access the application",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the AuthorizedDomain entity."
        },
        "domain": {
          "type": "string",
          "description": "The name of the authorized domain. For example, 'example.com'."
        }
      },
      "required": [
        "id",
        "domain"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/backend/entities/Project"
          },
          "description": "Stores project details. Project ID is used as the document ID.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            }
          ]
        }
      },
      {
        "path": "/metroCodes/{metroCodeId}",
        "definition": {
          "entityName": "MetroCode",
          "schema": {
            "$ref": "#/backend/entities/MetroCode"
          },
          "description": "Stores metro code information. MetroCode ID is used as the document ID.",
          "params": [
            {
              "name": "metroCodeId",
              "description": "The unique identifier for the metro code."
            }
          ]
        }
      },
      {
        "path": "/contractorTypes/{contractorTypeId}",
        "definition": {
          "entityName": "ContractorType",
          "schema": {
            "$ref": "#/backend/entities/ContractorType"
          },
          "description": "Stores contractor types. ContractorType ID is used as the document ID.",
          "params": [
            {
              "name": "contractorTypeId",
              "description": "The unique identifier for the contractor type."
            }
          ]
        }
      },
      {
        "path": "/contractors/{contractorId}",
        "definition": {
          "entityName": "Contractor",
          "schema": {
            "$ref": "#/backend/entities/Contractor"
          },
          "description": "Stores contractor information. Contractor ID is used as the document ID.",
          "params": [
            {
              "name": "contractorId",
              "description": "The unique identifier for the contractor."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/eoiEmails/{eoiEmailId}",
        "definition": {
          "entityName": "EOIEmail",
          "schema": {
            "$ref": "#/backend/entities/EOIEmail"
          },
          "description": "Stores Expression of Interest emails related to a project. Project ID and EOIEmail ID are used in the path.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            },
            {
              "name": "eoiEmailId",
              "description": "The unique identifier for the EOI email."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/rfpEmails/{rfpEmailId}",
        "definition": {
          "entityName": "RFPEmail",
          "schema": {
            "$ref": "#/backend/entities/RFPEmail"
          },
          "description": "Stores Request for Proposal emails related to a project. Project ID and RFPEmail ID are used in the path.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            },
            {
              "name": "rfpEmailId",
              "description": "The unique identifier for the RFP email."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/proposals/{proposalId}",
        "definition": {
          "entityName": "Proposal",
          "schema": {
            "$ref": "#/backend/entities/Proposal"
          },
          "description": "Stores proposals submitted for a project. Project ID and Proposal ID are used in the path.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            },
            {
              "name": "proposalId",
              "description": "The unique identifier for the proposal."
            }
          ]
        }
      },
      {
        "path": "/proposals/{proposalId}/scorecards/{scorecardId}",
        "definition": {
          "entityName": "Scorecard",
          "schema": {
            "$ref": "#/backend/entities/Scorecard"
          },
          "description": "Stores scorecards for proposals. Proposal ID and Scorecard ID are used in the path.",
          "params": [
            {
              "name": "proposalId",
              "description": "The unique identifier for the proposal."
            },
            {
              "name": "scorecardId",
              "description": "The unique identifier for the scorecard."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/awardRecommendation",
        "definition": {
          "entityName": "AwardRecommendation",
          "schema": {
            "$ref": "#/backend/entities/AwardRecommendation"
          },
          "description": "Stores the award recommendation for a project. Project ID is used as the document ID.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/feedback/{feedbackId}",
        "definition": {
          "entityName": "Feedback",
          "schema": {
            "$ref": "#/backend/entities/Feedback"
          },
          "description": "Stores feedback provided by users for a project.  User ID and Feedback ID are used in the path.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "feedbackId",
              "description": "The unique identifier for the feedback."
            }
          ]
        }
      },
      {
        "path": "/technicalDocuments/{technicalDocumentId}",
        "definition": {
          "entityName": "TechnicalDocument",
          "schema": {
            "$ref": "#/backend/entities/TechnicalDocument"
          },
          "description": "Stores technical documents. TechnicalDocument ID is used as the document ID.",
          "params": [
            {
              "name": "technicalDocumentId",
              "description": "The unique identifier for the technical document."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user information. User ID is used as the document ID.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/authorizedDomains/{authorizedDomainId}",
        "definition": {
          "entityName": "AuthorizedDomain",
          "schema": {
            "$ref": "#/backend/entities/AuthorizedDomain"
          },
          "description": "Stores information about authorized domains.  AuthorizedDomain ID is used as the document ID.",
          "params": [
            {
              "name": "authorizedDomainId",
              "description": "The unique identifier for the authorized domain."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the MARCUS Automation Suite application, emphasizing security, scalability, and debuggability.  The design adheres to the principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Rules are not Filters).\n\nAuthorization Independence is achieved primarily through denormalization.  For example, if access to `EOIEmails` depends on the `Project`'s attributes, those attributes would be copied into each `EOIEmail` document.  However, given the current schema, direct denormalization of project attributes into subcollections is not immediately necessary. Instead, the path-based ownership `/projects/{projectId}/eoiEmails/{eoiEmailId}` allows simple rules based on the project ID.\n\nStructural Segregation is applied by separating different types of data into distinct collections.  For instance, global entities like `MetroCodes` and `ContractorTypes` reside in root-level collections, while project-specific data is nested under `/projects/{projectId}`.\n\nAccess Modeling utilizes path-based ownership for entities representing `User 1:N Entity` relationships. For example, project-specific data like `EOIEmails`, `RFPEmails`, `Proposals`, and `Feedback` are stored as subcollections of the `/projects/{projectId}` collection, enabling easy management and securing of project-related data. User-specific feedback is stored under `/users/{userId}/feedback/{feedbackId}`. Roles are managed in the `users` collection.\n\nQAPs (Rules are not Filters) are supported through structural segregation and the use of membership maps where necessary. The structure facilitates secure `list` operations by ensuring that each collection has a homogeneous security posture. For instance, listing `EOIEmails` under a specific project requires the user to have access to that project.\n\nInvariants such as ownership, timestamps, and denormalized data integrity are maintained through the use of server-side functions or triggers where necessary. Although the current schema doesn't explicitly define timestamp fields, adding `createdAt` and `updatedAt` timestamp fields will be considered in the future.\n\nThis structure ensures that security rules can be written clearly and efficiently, minimizing the need for complex logic and `get()` calls, thereby promoting a more secure and maintainable application."
  }
}