{
  "entities": {
    "Project": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project",
      "type": "object",
      "description": "Represents a project within the MARCUS Automation Suite.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Project entity."
        },
        "projectName": {
          "type": "string",
          "description": "The name of the project."
        },
        "scopeOfWork": {
          "type": "string",
          "description": "A description of the work to be performed for the project."
        },
        "metroCode": {
          "type": "string",
          "description": "The metro code associated with the project."
        },
        "contractorType": {
          "type": "string",
          "description": "The type of contractor required for the project."
        },
        "estimatedBudget": {
          "type": "number",
          "description": "The estimated budget for the project."
        },
        "startDate": {
          "type": "string",
          "description": "The planned start date of the project.",
          "format": "date-time"
        },
        "technicalDocumentIds": {
          "type": "array",
          "description": "References to TechnicalDocuments. (Relationship: Project 1:N TechnicalDocument)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "projectName",
        "scopeOfWork",
        "metroCode",
        "contractorType",
        "estimatedBudget",
        "startDate"
      ]
    },
    "Contractor": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Contractor",
      "type": "object",
      "description": "Represents a contractor in the preferred contractor list.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Contractor entity."
        },
        "companyName": {
          "type": "string",
          "description": "The name of the contractor's company."
        },
        "contactInformation": {
          "type": "string",
          "description": "Contact details for the contractor."
        },
        "metroCodes": {
          "type": "array",
          "description": "Metro codes the contractor services.",
          "items": {
            "type": "string"
          }
        },
        "contractorTypes": {
          "type": "array",
          "description": "Types of contractor.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "companyName",
        "contactInformation"
      ]
    },
    "EOIEmail": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EOIEmail",
      "type": "object",
      "description": "Represents an Expression of Interest (EOI) email.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the EOIEmail entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N EOIEmail)"
        },
        "contractorId": {
          "type": "string",
          "description": "Reference to Contractor. (Relationship: Contractor 1:N EOIEmail)"
        },
        "emailContent": {
          "type": "string",
          "description": "The content of the EOI email."
        },
        "sentDate": {
          "type": "string",
          "description": "The date and time the email was sent.",
          "format": "date-time"
        },
        "approvalStatus": {
          "type": "string",
          "description": "Approval status of the email, prior to sending.  (e.g. 'Pending', 'Approved', 'Rejected')"
        }
      },
      "required": [
        "id",
        "projectId",
        "contractorId",
        "emailContent",
        "sentDate"
      ]
    },
    "RFPEmail": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RFPEmail",
      "type": "object",
      "description": "Represents an RFP invitation email.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the RFPEmail entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N RFPEmail)"
        },
        "contractorId": {
          "type": "string",
          "description": "Reference to Contractor. (Relationship: Contractor 1:N RFPEmail)"
        },
        "emailContent": {
          "type": "string",
          "description": "The content of the RFP email."
        },
        "sentDate": {
          "type": "string",
          "description": "The date and time the email was sent.",
          "format": "date-time"
        },
        "approvalStatus": {
          "type": "string",
          "description": "The approval status of the RFP email."
        }
      },
      "required": [
        "id",
        "projectId",
        "contractorId",
        "emailContent",
        "sentDate"
      ]
    },
    "Proposal": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Proposal",
      "type": "object",
      "description": "Represents a proposal submitted by a contractor.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Proposal entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N Proposal)"
        },
        "contractorId": {
          "type": "string",
          "description": "Reference to Contractor. (Relationship: Contractor 1:N Proposal)"
        },
        "submissionDate": {
          "type": "string",
          "description": "The date and time the proposal was submitted.",
          "format": "date-time"
        },
        "documentIds": {
          "type": "array",
          "description": "References to TechnicalDocuments. (Relationship: Proposal 1:N TechnicalDocument)",
          "items": {
            "type": "string"
          }
        },
        "safetyScore": {
          "type": "number",
          "description": "The safety score assigned to the proposal."
        },
        "experienceScore": {
          "type": "number",
          "description": "The experience score assigned to the proposal."
        },
        "programmaticApproachScore": {
          "type": "number",
          "description": "The programmatic approach score assigned to the proposal."
        },
        "commercialExcellenceScore": {
          "type": "number",
          "description": "The commercial excellence score assigned to the proposal."
        },
        "innovativeSolutionsScore": {
          "type": "number",
          "description": "The innovative solutions score assigned to the proposal."
        },
        "missionCriticalExperienceScore": {
          "type": "number",
          "description": "The mission critical experience score assigned to the proposal."
        }
      },
      "required": [
        "id",
        "projectId",
        "contractorId",
        "submissionDate"
      ]
    },
    "AwardRecommendation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AwardRecommendation",
      "type": "object",
      "description": "Represents an award recommendation based on proposal analysis.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the AwardRecommendation entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N AwardRecommendation)"
        },
        "contractorId": {
          "type": "string",
          "description": "Reference to Contractor. (Relationship: Contractor 1:N AwardRecommendation)"
        },
        "recommendationReason": {
          "type": "string",
          "description": "The reasoning behind the award recommendation."
        },
        "srmUpdate": {
          "type": "string",
          "description": "The suggested update to the Supplier Relationship Management (SRM) system."
        },
        "lessonsLearned": {
          "type": "string",
          "description": "A summary of lessons learned from the project."
        }
      },
      "required": [
        "id",
        "projectId",
        "contractorId",
        "recommendationReason"
      ]
    },
    "Feedback": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Feedback",
      "type": "object",
      "description": "Represents feedback collected from stakeholders and contractors.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Feedback entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N Feedback)"
        },
        "feedbackProviderType": {
          "type": "string",
          "description": "The type of entity giving feedback (e.g., 'Stakeholder', 'Contractor')."
        },
        "feedbackText": {
          "type": "string",
          "description": "The text of the feedback."
        },
        "submissionDate": {
          "type": "string",
          "description": "The date the feedback was submitted.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "projectId",
        "feedbackProviderType",
        "feedbackText",
        "submissionDate"
      ]
    },
    "MetroCode": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MetroCode",
      "type": "object",
      "description": "Represents a metro code.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the MetroCode entity."
        },
        "code": {
          "type": "string",
          "description": "The metro code itself."
        },
        "description": {
          "type": "string",
          "description": "A description of the metro area."
        }
      },
      "required": [
        "id",
        "code",
        "description"
      ]
    },
    "TechnicalDocument": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TechnicalDocument",
      "type": "object",
      "description": "Represents a technical document.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the TechnicalDocument entity."
        },
        "fileName": {
          "type": "string",
          "description": "The name of the file."
        },
        "fileType": {
          "type": "string",
          "description": "The type of file (e.g., PDF, DOCX)."
        },
        "fileSize": {
          "type": "number",
          "description": "The size of the file in bytes."
        },
        "uploadDate": {
          "type": "string",
          "description": "The date the file was uploaded.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "fileName",
        "fileType",
        "fileSize",
        "uploadDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/backend/entities/Project"
          },
          "description": "Stores project entities.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/emails_eoi/{eoiEmailId}",
        "definition": {
          "entityName": "EOIEmail",
          "schema": {
            "$ref": "#/backend/entities/EOIEmail"
          },
          "description": "Stores EOI emails associated with a specific project.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            },
            {
              "name": "eoiEmailId",
              "description": "The unique identifier for the EOI email."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/emails_rfp/{rfpEmailId}",
        "definition": {
          "entityName": "RFPEmail",
          "schema": {
            "$ref": "#/backend/entities/RFPEmail"
          },
          "description": "Stores RFP emails associated with a specific project.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            },
            {
              "name": "rfpEmailId",
              "description": "The unique identifier for the RFP email."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/proposals/{proposalId}",
        "definition": {
          "entityName": "Proposal",
          "schema": {
            "$ref": "#/backend/entities/Proposal"
          },
          "description": "Stores proposals submitted for a specific project.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            },
            {
              "name": "proposalId",
              "description": "The unique identifier for the proposal."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/award_recommendations/{awardRecommendationId}",
        "definition": {
          "entityName": "AwardRecommendation",
          "schema": {
            "$ref": "#/backend/entities/AwardRecommendation"
          },
          "description": "Stores award recommendations for a specific project.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            },
            {
              "name": "awardRecommendationId",
              "description": "The unique identifier for the award recommendation."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/feedback/{feedbackId}",
        "definition": {
          "entityName": "Feedback",
          "schema": {
            "$ref": "#/backend/entities/Feedback"
          },
          "description": "Stores feedback collected for a specific project.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            },
            {
              "name": "feedbackId",
              "description": "The unique identifier for the feedback."
            }
          ]
        }
      },
      {
        "path": "/contractors/{contractorId}",
        "definition": {
          "entityName": "Contractor",
          "schema": {
            "$ref": "#/backend/entities/Contractor"
          },
          "description": "Stores contractor entities.",
          "params": [
            {
              "name": "contractorId",
              "description": "The unique identifier for the contractor."
            }
          ]
        }
      },
      {
        "path": "/metro_codes/{metroCodeId}",
        "definition": {
          "entityName": "MetroCode",
          "schema": {
            "$ref": "#/backend/entities/MetroCode"
          },
          "description": "Stores metro code entities.",
          "params": [
            {
              "name": "metroCodeId",
              "description": "The unique identifier for the metro code."
            }
          ]
        }
      },
      {
        "path": "/technical_documents/{technicalDocumentId}",
        "definition": {
          "entityName": "TechnicalDocument",
          "schema": {
            "$ref": "#/backend/entities/TechnicalDocument"
          },
          "description": "Stores technical document entities.",
          "params": [
            {
              "name": "technicalDocumentId",
              "description": "The unique identifier for the technical document."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to support the MARCUS Automation Suite, emphasizing security, scalability, and ease of debugging.  Authorization Independence is achieved through denormalization where needed, avoiding chained `get()` calls in security rules.  Structural Segregation is applied by grouping data with similar access control needs into dedicated collections. Access Modeling utilizes path-based ownership for user-specific data and membership maps for collaborative entities. QAPs are supported via structural segregation.\n\nSpecifically:\n\n*   **Projects:** Stored in a top-level `/projects` collection. Project-related data (EOIEmails, RFPEmails, Proposals, AwardRecommendations, Feedback) are stored in subcollections under each project document (`/projects/{projectId}/emails_eoi`, `/projects/{projectId}/emails_rfp`, etc.). This ensures logical grouping and clear ownership. No denormalization needed as access to these subcollections is managed by project-level roles.\n*   **Contractors:** Stored in a top-level `/contractors` collection. Contractor data is generally public or managed by admins, so subcollections are not used.\n*   **Metro Codes:** Stored in a top-level `/metro_codes` collection. Metro Codes are managed by admins, so subcollections are not used.\n*   **Technical Documents:** Stored in a top-level `/technical_documents` collection.\n\n*QAPs Support:*\n\n*   The segregation of projects and contractor data into top-level collections allows for efficient listing and filtering of projects or contractors based on various criteria. Security rules can efficiently control access to these lists based on user roles or project membership.\n\n*   The use of subcollections for project-related entities (EOIEmails, RFPEmails, Proposals, AwardRecommendations, Feedback) ensures that only authorized users can access these associated documents. This structure supports secure listing of project-specific information."
  }
}