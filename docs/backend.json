{
  "entities": {
    "Project": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project",
      "type": "object",
      "description": "Represents a project within the MARCUS Automation Suite.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Project entity."
        },
        "projectName": {
          "type": "string",
          "description": "The name of the project."
        },
        "scopeOfWork": {
          "type": "string",
          "description": "A description of the work to be performed for the project."
        },
        "metroCode": {
          "type": "string",
          "description": "The metro code associated with the project."
        },
        "contractorType": {
          "type": "string",
          "description": "The type of contractor required for the project."
        },
        "estimatedBudget": {
          "type": "number",
          "description": "The estimated budget for the project."
        },
        "startDate": {
          "type": "string",
          "description": "The planned start date of the project.",
          "format": "date-time"
        },
        "technicalDocumentIds": {
          "type": "array",
          "description": "References to TechnicalDocuments. (Relationship: Project 1:N TechnicalDocument)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "projectName",
        "scopeOfWork",
        "metroCode",
        "contractorType",
        "estimatedBudget",
        "startDate"
      ]
    },
    "Contractor": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Contractor",
      "type": "object",
      "description": "Represents a contractor in the preferred contractor list.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Contractor entity."
        },
        "companyName": {
          "type": "string",
          "description": "The name of the contractor's company."
        },
        "contactName": {
          "type": "string",
          "description": "The name of a contact person at the contractor's company."
        },
        "contactEmail": {
          "type": "string",
          "description": "The email address of the contact person.",
          "format": "email"
        },
        "contactPhone": {
          "type": "string",
          "description": "The phone number of the contact person."
        },
        "metroCodes": {
          "type": "array",
          "description": "Metro codes the contractor is available in.",
          "items": {
            "type": "string"
          }
        },
        "contractorType": {
          "type": "string",
          "description": "Type of work the contractor performs."
        }
      },
      "required": [
        "id",
        "companyName",
        "contactName",
        "contactEmail",
        "contactPhone"
      ]
    },
    "EOIEmail": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EOIEmail",
      "type": "object",
      "description": "Represents an Expression of Interest email sent to a contractor.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the EOIEmail entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N EOIEmail)"
        },
        "contractorId": {
          "type": "string",
          "description": "Reference to Contractor. (Relationship: Contractor 1:N EOIEmail)"
        },
        "sentDate": {
          "type": "string",
          "description": "The date and time the EOI email was sent.",
          "format": "date-time"
        },
        "emailContent": {
          "type": "string",
          "description": "The content of the EOI email."
        },
        "isInterested": {
          "type": "boolean",
          "description": "Indicates whether the contractor expressed interest."
        }
      },
      "required": [
        "id",
        "projectId",
        "contractorId",
        "sentDate",
        "emailContent"
      ]
    },
    "RFPEmail": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RFPEmail",
      "type": "object",
      "description": "Represents an RFP invitation email sent to a contractor.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the RFPEmail entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N RFPEmail)"
        },
        "contractorId": {
          "type": "string",
          "description": "Reference to Contractor. (Relationship: Contractor 1:N RFPEmail)"
        },
        "sentDate": {
          "type": "string",
          "description": "The date and time the RFP email was sent.",
          "format": "date-time"
        },
        "emailContent": {
          "type": "string",
          "description": "The content of the RFP email."
        },
        "approvalStatus": {
          "type": "string",
          "description": "The approval status of the RFP email (e.g., 'Pending', 'Approved', 'Rejected')."
        }
      },
      "required": [
        "id",
        "projectId",
        "contractorId",
        "sentDate",
        "emailContent",
        "approvalStatus"
      ]
    },
    "RFP": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RFP",
      "type": "object",
      "description": "Represents a Request for Proposal generated for a project.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the RFP entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:1 RFP)"
        },
        "generationDate": {
          "type": "string",
          "description": "The date and time the RFP was generated.",
          "format": "date-time"
        },
        "instructions": {
          "type": "string",
          "description": "The project-specific instructions included in the RFP."
        },
        "contractorIds": {
          "type": "array",
          "description": "References to Contractors. (Relationship: RFP 1:N Contractor)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "projectId",
        "generationDate",
        "instructions"
      ]
    },
    "Proposal": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Proposal",
      "type": "object",
      "description": "Represents a proposal submitted by a contractor in response to an RFP.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Proposal entity."
        },
        "rfpId": {
          "type": "string",
          "description": "Reference to RFP. (Relationship: RFP 1:N Proposal)"
        },
        "contractorId": {
          "type": "string",
          "description": "Reference to Contractor. (Relationship: Contractor 1:N Proposal)"
        },
        "submissionDate": {
          "type": "string",
          "description": "The date and time the proposal was submitted.",
          "format": "date-time"
        },
        "content": {
          "type": "string",
          "description": "The content of the proposal."
        },
        "scorecardId": {
          "type": "string",
          "description": "Reference to Scorecard. (Relationship: Proposal 1:1 Scorecard)"
        }
      },
      "required": [
        "id",
        "rfpId",
        "contractorId",
        "submissionDate",
        "content"
      ]
    },
    "Scorecard": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Scorecard",
      "type": "object",
      "description": "Represents the scorecard for evaluating a proposal.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Scorecard entity."
        },
        "safety": {
          "type": "number",
          "description": "The safety score for the proposal."
        },
        "experience": {
          "type": "number",
          "description": "The experience score for the proposal."
        },
        "programmaticApproach": {
          "type": "number",
          "description": "The programmatic approach score for the proposal."
        },
        "commercialExcellence": {
          "type": "number",
          "description": "The commercial excellence score for the proposal."
        },
        "innovativeSolutions": {
          "type": "number",
          "description": "The innovative solutions score for the proposal."
        },
        "missionCriticalExperience": {
          "type": "number",
          "description": "The mission critical experience score for the proposal."
        }
      },
      "required": [
        "id",
        "safety",
        "experience",
        "programmaticApproach",
        "commercialExcellence",
        "innovativeSolutions",
        "missionCriticalExperience"
      ]
    },
    "AwardRecommendation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AwardRecommendation",
      "type": "object",
      "description": "Represents the AI-driven award recommendation based on proposal analysis and scoring.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the AwardRecommendation entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N AwardRecommendation)"
        },
        "contractorId": {
          "type": "string",
          "description": "Reference to Contractor. (Relationship: Contractor 1:N AwardRecommendation)"
        },
        "recommendationDate": {
          "type": "string",
          "description": "The date and time the recommendation was made.",
          "format": "date-time"
        },
        "justification": {
          "type": "string",
          "description": "The justification for the award recommendation."
        }
      },
      "required": [
        "id",
        "projectId",
        "contractorId",
        "recommendationDate",
        "justification"
      ]
    },
    "Feedback": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Feedback",
      "type": "object",
      "description": "Represents feedback collected from stakeholders and contractors.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Feedback entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N Feedback)"
        },
        "source": {
          "type": "string",
          "description": "The source of the feedback (e.g., 'Stakeholder', 'Contractor')."
        },
        "feedbackDate": {
          "type": "string",
          "description": "The date and time the feedback was submitted.",
          "format": "date-time"
        },
        "comments": {
          "type": "string",
          "description": "The feedback comments."
        },
        "rating": {
          "type": "number",
          "description": "A rating of the system performance."
        }
      },
      "required": [
        "id",
        "projectId",
        "source",
        "feedbackDate",
        "comments"
      ]
    },
    "MetroCode": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MetroCode",
      "type": "object",
      "description": "Represents a geographical metro code.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the MetroCode entity."
        },
        "code": {
          "type": "string",
          "description": "The metro code."
        },
        "description": {
          "type": "string",
          "description": "A description of the metro area."
        }
      },
      "required": [
        "id",
        "code",
        "description"
      ]
    },
    "TechnicalDocument": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TechnicalDocument",
      "type": "object",
      "description": "Represents a technical document associated with a project.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the TechnicalDocument entity."
        },
        "fileName": {
          "type": "string",
          "description": "The name of the file."
        },
        "fileType": {
          "type": "string",
          "description": "The type of the file (e.g., PDF, DOCX)."
        },
        "uploadDate": {
          "type": "string",
          "description": "The date and time the file was uploaded.",
          "format": "date-time"
        },
        "fileSize": {
          "type": "number",
          "description": "The size of the file in bytes."
        }
      },
      "required": [
        "id",
        "fileName",
        "fileType",
        "uploadDate",
        "fileSize"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/backend/entities/Project"
          },
          "description": "Stores project details. The 'members' map, if implemented, would be denormalized to subcollections for authorization independence.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/technicalDocuments/{technicalDocumentId}",
        "definition": {
          "entityName": "TechnicalDocument",
          "schema": {
            "$ref": "#/backend/entities/TechnicalDocument"
          },
          "description": "Stores technical documents associated with a project.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            },
            {
              "name": "technicalDocumentId",
              "description": "The unique identifier for the technical document."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/eoiEmails/{eoiEmailId}",
        "definition": {
          "entityName": "EOIEmail",
          "schema": {
            "$ref": "#/backend/entities/EOIEmail"
          },
          "description": "Stores Expression of Interest emails sent for a project. Includes denormalized 'members' map (from the parent Project) for authorization independence.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            },
            {
              "name": "eoiEmailId",
              "description": "The unique identifier for the EOI email."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/rfpEmails/{rfpEmailId}",
        "definition": {
          "entityName": "RFPEmail",
          "schema": {
            "$ref": "#/backend/entities/RFPEmail"
          },
          "description": "Stores RFP invitation emails sent for a project. Includes denormalized 'members' map (from the parent Project) for authorization independence.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            },
            {
              "name": "rfpEmailId",
              "description": "The unique identifier for the RFP email."
            }
          ]
        }
      },
      {
        "path": "/rfps/{rfpId}",
        "definition": {
          "entityName": "RFP",
          "schema": {
            "$ref": "#/backend/entities/RFP"
          },
          "description": "Stores Requests for Proposals.",
          "params": [
            {
              "name": "rfpId",
              "description": "The unique identifier for the RFP."
            }
          ]
        }
      },
      {
        "path": "/proposals/{proposalId}",
        "definition": {
          "entityName": "Proposal",
          "schema": {
            "$ref": "#/backend/entities/Proposal"
          },
          "description": "Stores proposals submitted by contractors.",
          "params": [
            {
              "name": "proposalId",
              "description": "The unique identifier for the proposal."
            }
          ]
        }
      },
      {
        "path": "/scorecards/{scorecardId}",
        "definition": {
          "entityName": "Scorecard",
          "schema": {
            "$ref": "#/backend/entities/Scorecard"
          },
          "description": "Stores scorecards for evaluating proposals.",
          "params": [
            {
              "name": "scorecardId",
              "description": "The unique identifier for the scorecard."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/awardRecommendations/{awardRecommendationId}",
        "definition": {
          "entityName": "AwardRecommendation",
          "schema": {
            "$ref": "#/backend/entities/AwardRecommendation"
          },
          "description": "Stores award recommendations for a project. Includes denormalized 'members' map (from the parent Project) for authorization independence.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            },
            {
              "name": "awardRecommendationId",
              "description": "The unique identifier for the award recommendation."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/feedback/{feedbackId}",
        "definition": {
          "entityName": "Feedback",
          "schema": {
            "$ref": "#/backend/entities/Feedback"
          },
          "description": "Stores feedback collected for a project. Includes denormalized 'members' map (from the parent Project) for authorization independence.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            },
            {
              "name": "feedbackId",
              "description": "The unique identifier for the feedback entry."
            }
          ]
        }
      },
      {
        "path": "/metroCodes/{metroCodeId}",
        "definition": {
          "entityName": "MetroCode",
          "schema": {
            "$ref": "#/backend/entities/MetroCode"
          },
          "description": "Stores a list of metro codes.",
          "params": [
            {
              "name": "metroCodeId",
              "description": "The unique identifier for the metro code."
            }
          ]
        }
      },
      {
        "path": "/contractors/{contractorId}",
        "definition": {
          "entityName": "Contractor",
          "schema": {
            "$ref": "#/backend/entities/Contractor"
          },
          "description": "Stores contractor information.",
          "params": [
            {
              "name": "contractorId",
              "description": "The unique identifier for the contractor."
            }
          ]
        }
      },
      {
        "path": "/roles_admin/{userId}",
        "definition": {
          "entityName": "user",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Documents in this collection indicate the user is an administrator. Existence implies the role.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/roles_project_creator/{userId}",
        "definition": {
          "entityName": "user",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Documents in this collection indicate the user can create projects. Existence implies the role.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the MARCUS Automation Suite, emphasizing authorization independence, clarity, and scalability. It leverages path-based ownership for user-specific data and membership maps for collaborative entities. The key strategy is denormalization of authorization data to avoid costly and insecure `get()` calls in security rules.\n\n**Authorization Independence (Denormalization):**\n\n*   The structure avoids hierarchical authorization dependencies.  Access control information (e.g., project membership) is denormalized into subcollections where necessary. For instance, if access to `EOIEmails` or `RFPEmails` depends on project membership, the relevant membership data is copied into those subcollections.\n\n**Structural Segregation:**\n\n*   The structure separates data with different security needs. For example, global metro codes are stored separately from project-specific data.\n\n**Access Modeling:**\n\n*   Path-Based Ownership: Entities directly associated with a user (none explicitly defined in the input, but could be added for settings or preferences) would reside under `/users/{userId}`.\n*   Membership Maps: Collaborative access is handled with membership maps. If, for example, project access needs to be controlled beyond the project creator, a `members` map would be added to the `Project` entity and denormalized to child collections like `EOIEmails` and `RFPEmails`.\n\n**QAPs (Rules are not Filters):**\n\n*   The segregation of data into collections with homogeneous security requirements ensures that list operations can be secured without filtering. For example, listing projects only requires checking the user's role against the project's metadata or associated membership map (if implemented).\n\n**Invariants:**\n\n*   Timestamps can be enforced using server-side timestamps and security rules. Ownership is maintained through the consistent use of `ownerId` and path-based ownership.\n\n**Example Security Rule Considerations:**\n\n*   A user can create a project if they have the appropriate global role (e.g., present in `/roles_project_creator/{userId}`).\n*   Access to `EOIEmails` or `RFPEmails` would be based on the user's presence in the project's `members` map (denormalized into these subcollections)."
  }
}