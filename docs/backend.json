{
  "entities": {
    "Project": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project",
      "type": "object",
      "description": "Represents a project within the MARCUS Automation Suite.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the project."
        },
        "projectName": {
          "type": "string",
          "description": "The name of the project."
        },
        "scopeOfWork": {
          "type": "string",
          "description": "A description of the project's scope of work."
        },
        "metroCode": {
          "type": "string",
          "description": "The metro code associated with the project."
        },
        "contractorType": {
          "type": "string",
          "description": "The type of contractor required for the project."
        },
        "estimatedBudget": {
          "type": "number",
          "description": "The estimated budget for the project."
        },
        "startDate": {
          "type": "string",
          "description": "The start date of the project.",
          "format": "date-time"
        },
        "technicalDocumentIds": {
          "type": "array",
          "description": "References to Technical Documents. (Relationship: Project 1:N TechnicalDocument)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "projectName",
        "scopeOfWork",
        "metroCode",
        "contractorType",
        "estimatedBudget",
        "startDate"
      ]
    },
    "Contractor": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Contractor",
      "type": "object",
      "description": "Represents a contractor available for projects.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the contractor."
        },
        "companyName": {
          "type": "string",
          "description": "The name of the contractor's company."
        },
        "contactInformation": {
          "type": "string",
          "description": "The contractor's contact information."
        },
        "metroCodes": {
          "type": "array",
          "description": "Metro codes the contractor is available in.",
          "items": {
            "type": "string"
          }
        },
        "contractorType": {
          "type": "string",
          "description": "The type of contractor."
        }
      },
      "required": [
        "id",
        "companyName",
        "contactInformation",
        "metroCodes",
        "contractorType"
      ]
    },
    "EOIEmail": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EOIEmail",
      "type": "object",
      "description": "Represents an Expression of Interest (EOI) email.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the EOI email."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N EOIEmail)"
        },
        "contractorId": {
          "type": "string",
          "description": "Reference to Contractor. (Relationship: Contractor 1:N EOIEmail)"
        },
        "sentDate": {
          "type": "string",
          "description": "The date the EOI email was sent.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "The status of the EOI email (e.g., Sent, Opened, Replied)."
        }
      },
      "required": [
        "id",
        "projectId",
        "contractorId",
        "sentDate",
        "status"
      ]
    },
    "RFPEmail": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RFPEmail",
      "type": "object",
      "description": "Represents an email requesting RFP participation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the RFP email."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N RFPEmail)"
        },
        "contractorId": {
          "type": "string",
          "description": "Reference to Contractor. (Relationship: Contractor 1:N RFPEmail)"
        },
        "sentDate": {
          "type": "string",
          "description": "The date the RFP email was sent.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "The status of the RFP email (e.g., Draft, Approved, Sent)."
        },
        "emailBody": {
          "type": "string",
          "description": "The content of the RFP email."
        }
      },
      "required": [
        "id",
        "projectId",
        "contractorId",
        "sentDate",
        "status",
        "emailBody"
      ]
    },
    "RFP": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RFP",
      "type": "object",
      "description": "Represents a Request for Proposal (RFP).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the RFP."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N RFP)"
        },
        "generatedDate": {
          "type": "string",
          "description": "The date the RFP was generated.",
          "format": "date-time"
        },
        "instructions": {
          "type": "string",
          "description": "The project-specific RFP instructions."
        }
      },
      "required": [
        "id",
        "projectId",
        "generatedDate",
        "instructions"
      ]
    },
    "Proposal": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Proposal",
      "type": "object",
      "description": "Represents a proposal submitted by a contractor.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the proposal."
        },
        "contractorId": {
          "type": "string",
          "description": "Reference to Contractor. (Relationship: Contractor 1:N Proposal)"
        },
        "rfpId": {
          "type": "string",
          "description": "Reference to RFP. (Relationship: RFP 1:N Proposal)"
        },
        "submissionDate": {
          "type": "string",
          "description": "The date the proposal was submitted.",
          "format": "date-time"
        },
        "content": {
          "type": "string",
          "description": "The content of the proposal."
        }
      },
      "required": [
        "id",
        "contractorId",
        "rfpId",
        "submissionDate",
        "content"
      ]
    },
    "Scorecard": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Scorecard",
      "type": "object",
      "description": "Represents a scorecard for evaluating proposals.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the scorecard."
        },
        "proposalId": {
          "type": "string",
          "description": "Reference to Proposal. (Relationship: Proposal 1:N Scorecard)"
        },
        "safety": {
          "type": "number",
          "description": "Score for Safety."
        },
        "experience": {
          "type": "number",
          "description": "Score for Experience."
        },
        "programmaticApproach": {
          "type": "number",
          "description": "Score for Programmatic Approach."
        },
        "commercialExcellence": {
          "type": "number",
          "description": "Score for Commercial Excellence."
        },
        "innovativeSolutions": {
          "type": "number",
          "description": "Score for Innovative Solutions."
        },
        "missionCriticalExperience": {
          "type": "number",
          "description": "Score for Mission Critical Experience."
        }
      },
      "required": [
        "id",
        "proposalId"
      ]
    },
    "AwardRecommendation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AwardRecommendation",
      "type": "object",
      "description": "Represents an award recommendation based on proposal analysis.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the award recommendation."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N AwardRecommendation)"
        },
        "contractorId": {
          "type": "string",
          "description": "Reference to Contractor. (Relationship: Contractor 1:N AwardRecommendation)"
        },
        "recommendation": {
          "type": "string",
          "description": "The AI-driven award recommendation."
        },
        "justification": {
          "type": "string",
          "description": "Justification for the recommendation."
        }
      },
      "required": [
        "id",
        "projectId",
        "contractorId",
        "recommendation",
        "justification"
      ]
    },
    "Feedback": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Feedback",
      "type": "object",
      "description": "Represents feedback collected from stakeholders and contractors.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the feedback."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N Feedback)"
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Feedback)"
        },
        "feedbackText": {
          "type": "string",
          "description": "The feedback text provided."
        },
        "rating": {
          "type": "number",
          "description": "A rating associated with the feedback."
        }
      },
      "required": [
        "id",
        "projectId",
        "userId",
        "feedbackText",
        "rating"
      ]
    },
    "MetroCode": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MetroCode",
      "type": "object",
      "description": "Represents a metro code.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the metro code."
        },
        "code": {
          "type": "string",
          "description": "The metro code itself."
        },
        "description": {
          "type": "string",
          "description": "A description of the metro area."
        }
      },
      "required": [
        "id",
        "code",
        "description"
      ]
    },
    "TechnicalDocument": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TechnicalDocument",
      "type": "object",
      "description": "Represents a technical document associated with a project.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the technical document."
        },
        "fileName": {
          "type": "string",
          "description": "The name of the file."
        },
        "fileType": {
          "type": "string",
          "description": "The type of the file (e.g., PDF, DOCX)."
        },
        "uploadDate": {
          "type": "string",
          "description": "The date the file was uploaded.",
          "format": "date-time"
        },
        "url": {
          "type": "string",
          "description": "The URL where the file can be accessed.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "fileName",
        "fileType",
        "uploadDate",
        "url"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the MARCUS Automation Suite.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "description": "The user's first name."
        },
        "lastName": {
          "type": "string",
          "description": "The user's last name."
        }
      },
      "required": [
        "id",
        "email",
        "firstName",
        "lastName"
      ]
    }
  },
  "auth": {
    "providers": []
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information. Access is public.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/backend/entities/Project"
          },
          "description": "Stores project data. Access is public.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/eoiEmails/{eoiEmailId}",
        "definition": {
          "entityName": "EOIEmail",
          "schema": {
            "$ref": "#/backend/entities/EOIEmail"
          },
          "description": "Stores EOI emails associated with a project. Access is public.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            },
            {
              "name": "eoiEmailId",
              "description": "The unique identifier of the EOI email."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/rfpEmails/{rfpEmailId}",
        "definition": {
          "entityName": "RFPEmail",
          "schema": {
            "$ref": "#/backend/entities/RFPEmail"
          },
          "description": "Stores RFP emails associated with a project. Access is public.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            },
            {
              "name": "rfpEmailId",
              "description": "The unique identifier of the RFP email."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/rfps/{rfpId}",
        "definition": {
          "entityName": "RFP",
          "schema": {
            "$ref": "#/backend/entities/RFP"
          },
          "description": "Stores RFPs associated with a project. Access is public.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            },
            {
              "name": "rfpId",
              "description": "The unique identifier of the RFP."
            }
          ]
        }
      },
      {
        "path": "/contractors/{contractorId}/proposals/{proposalId}",
        "definition": {
          "entityName": "Proposal",
          "schema": {
            "$ref": "#/backend/entities/Proposal"
          },
          "description": "Stores proposals submitted by contractors. Access is public.",
          "params": [
            {
              "name": "contractorId",
              "description": "The unique identifier of the contractor."
            },
            {
              "name": "proposalId",
              "description": "The unique identifier of the proposal."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/awardRecommendations/{awardRecommendationId}",
        "definition": {
          "entityName": "AwardRecommendation",
          "schema": {
            "$ref": "#/backend/entities/AwardRecommendation"
          },
          "description": "Stores award recommendations associated with a project. Access is public.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            },
            {
              "name": "awardRecommendationId",
              "description": "The unique identifier of the award recommendation."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/feedback/{feedbackId}",
        "definition": {
          "entityName": "Feedback",
          "schema": {
            "$ref": "#/backend/entities/Feedback"
          },
          "description": "Stores feedback associated with a project. Access is public.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            },
            {
              "name": "feedbackId",
              "description": "The unique identifier of the feedback."
            }
          ]
        }
      },
      {
        "path": "/metroCodes/{metroCodeId}",
        "definition": {
          "entityName": "MetroCode",
          "schema": {
            "$ref": "#/backend/entities/MetroCode"
          },
          "description": "Stores metro code data. Publicly accessible.",
          "params": [
            {
              "name": "metroCodeId",
              "description": "The unique identifier of the metro code."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/technicalDocuments/{technicalDocumentId}",
        "definition": {
          "entityName": "TechnicalDocument",
          "schema": {
            "$ref": "#/backend/entities/TechnicalDocument"
          },
          "description": "Stores technical documents associated with a project. Access is public.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            },
            {
              "name": "technicalDocumentId",
              "description": "The unique identifier of the technical document."
            }
          ]
        }
      },
      {
        "path": "/contractors/{contractorId}",
        "definition": {
          "entityName": "Contractor",
          "schema": {
            "$ref": "#/backend/entities/Contractor"
          },
          "description": "Stores contractor data. Publicly accessible.",
          "params": [
            {
              "name": "contractorId",
              "description": "The unique identifier of the contractor."
            }
          ]
        }
      },
      {
        "path": "/contractors/{contractorId}/proposals/{proposalId}/scorecards/{scorecardId}",
        "definition": {
          "entityName": "Scorecard",
          "schema": {
            "$ref": "#/backend/entities/Scorecard"
          },
          "description": "Stores scorecards for proposals, nested under proposals for easy retrieval. Access is public.",
          "params": [
            {
              "name": "contractorId",
              "description": "The unique identifier of the contractor."
            },
            {
              "name": "proposalId",
              "description": "The unique identifier of the proposal."
            },
            {
              "name": "scorecardId",
              "description": "The unique identifier of the scorecard."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore structure is designed to support the MARCUS Automation Suite, emphasizing security, scalability, and maintainability. It leverages path-based ownership for user-specific data and membership maps for collaborative entities. The key principle is authorization independence, achieved through denormalization, which allows for secure and efficient security rules without relying on costly `get()` operations. Each collection is designed with a homogeneous security posture in mind, ensuring consistent access control.\n\nSpecifically:\n\n*   **Users:** User data is stored under `/users/{userId}`, providing clear ownership and simplifying user-based access control.\n*   **Projects:** Projects are stored in a top-level `/projects` collection. To enable authorization independence for subcollections, critical project authorization data (e.g., project members) will be denormalized into the subcollections. Access to a project and its subcollections is controlled via a `members` map within each project document, which contains the roles of different users.\n*   **Contractors and MetroCodes:** These are top-level collections for global contractor and metro code data.\n*   **Project Subcollections (EOIEmails, RFPEmails, RFPs, AwardRecommendations, Feedback):** These are stored as subcollections of `/projects/{projectId}`. The `members` map from the parent `/projects/{projectId}` document is denormalized into each document within these subcollections. This allows rules to check membership without needing to read the parent document.  For example, EOIEmails will have a `members` field that mirrors the project's `members` field to determine who can read/write EOI emails related to a project.\n*   **Contractor Subcollections (Proposals):** Proposals are stored as subcollections of `/contractors/{contractorId}`. This is because the contractor 'owns' the proposal. The `projectId` is also denormalized into the proposal to allow reverse lookups.\n\nThis design addresses the QAPs (Rules are not Filters) requirement by ensuring that `list` operations can be secured without needing to filter based on data within documents. The segregation of data with different access needs (e.g., public metro codes vs. private project data) into separate collections simplifies the security rules and ensures data isolation.\n\nThe structure also enforces invariants such as ownership by using path-based access control for user data and denormalizing authorization data to prevent data inconsistencies during atomic operations. Timestamp fields in the documents are automatically managed by Firestore."
  }
}
